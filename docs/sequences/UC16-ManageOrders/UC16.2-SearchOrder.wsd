@startuml Search Order

actor Client

participant OrdersController
participant ModelDto
participant RequestValidation
participant OrdersService
participant QueryUtil
participant OrderModel

database MongoDB

' Step 1
    activate Client
    Client -> OrdersController: GET /api/orders/get-orders
    activate OrdersController

' Step 4
group Validation Flow
    OrdersController -> RequestValidation: validateSchema(GetListOrderDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x OrdersController: throw HttpException(400)
        OrdersController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> OrdersController: return valid data
    deactivate RequestValidation
end

break
break


' Step 5
group Business Logic Flow
    OrdersController -> OrdersService: getAndCountOrdersService(filters, skip, limit, sortBy, sortOrder)
    activate OrdersService
    OrdersService -> OrderModel: countDocuments(filters)
    activate OrderModel
    OrderModel -> MongoDB: query count 
    activate MongoDB

    alt count false
        MongoDB --x OrderModel:throw Error
        OrderModel --x OrdersService:throw Error
        OrdersService --x OrdersController: throw Error
        OrdersController -->> Client: HTTP 500  Server Error
    end

    MongoDB -->> OrderModel: return count
    deactivate MongoDB
    OrderModel -->> OrdersService: return count
    deactivate OrderModel
    OrdersService -> QueryUtil : extendQueryOptionsWithPagination(skip, limit)
    activate QueryUtil
    QueryUtil -->> OrdersService: return options
    deactivate QueryUtil
    OrdersService -> QueryUtil : extendQueryOptionsWithSort(sortBy, sortOrder)
    activate QueryUtil
    QueryUtil -->> OrdersService: return options
    deactivate QueryUtil
    OrdersService -> OrderModel: find()
    activate OrderModel
    OrderModel -> MongoDB: query select
    activate MongoDB

    alt select false
        MongoDB --x OrderModel:throw Error
        OrderModel --x OrdersService:throw Error
        OrdersService --x OrdersController: throw Error
        OrdersController -->> Client: HTTP 500  Server Error
    end

    MongoDB -->> OrderModel: return orders
    deactivate MongoDB
    OrderModel -->> OrdersService: return orders
    deactivate OrderModel
    OrdersService -->> OrdersController: return orders
    deactivate OrdersService
end

group Transform data response
    OrdersController -> ModelDto: newList(OrderDto)
    activate ModelDto
    ModelDto -->> OrdersController: return OrderDto 
    deactivate ModelDto

OrdersController --> Client: HTTP 200 Success
deactivate OrdersController
end

@enduml