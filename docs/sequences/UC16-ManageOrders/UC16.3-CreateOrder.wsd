@startuml Create Order

actor Client

participant OrdersController
participant ModelDto
participant RequestValidation
participant OrdersWorker
participant UsersService
participant GhnService
participant OrdersService
participant GeoapifyService
participant GhnAPI
participant OrderModel
participant UserModel

database MongoDB

' Step 1
    activate Client
    Client -> OrdersController: POST /api/orders/create-orders
    activate OrdersController

' Step 4
group Validation Flow
    OrdersController -> RequestValidation: validateSchema(createOrderDto)
     activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x OrdersController: throw HttpException(400)
        OrdersController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> OrdersController: return valid data
    deactivate RequestValidation
end

break
break

' Step 5
group Business Logic Flow
    OrdersController -> UsersService: getUserByIdService(customerId)
    activate UsersService

    UsersService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x OrdersController: throw Error
        OrdersController -->> Client: HTTP 500 Internal Server Error

    else user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UsersService: return null
        UsersService -->> OrdersController: return null
        OrdersController --x OrdersController: throw(HttpException(404))
        OrdersController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserModel: return customer
    deactivate MongoDB
    UserModel -->> UsersService: return customer
    deactivate UserModel
    UsersService -->> OrdersController: return customer
    deactivate UsersService
    OrdersController -> GhnService: getProvinceService(provinceCode)
    activate GhnService
    GhnService -> GhnAPI: GET /master-data/province
    activate GhnAPI

    alt get fail
        GhnAPI -->> GhnService: return null
        GhnService -->> OrdersController: return null
        OrdersController --x OrdersController: throw(HttpException(404))
        OrdersController -->> Client: HTTP 404 Not Found
    end

    GhnAPI -->> GhnService: return province
    deactivate GhnAPI
    GhnService -->> OrdersController: return province   
    deactivate GhnService
    OrdersController -> GhnService: getDistrictService(districtCode, provinceCode)
    activate GhnService
    GhnService -> GhnAPI: GET /master-data/district
    activate GhnAPI

    alt get fail
        GhnAPI -->> GhnService: return null
        GhnService -->> OrdersController: return null
        OrdersController --x OrdersController: throw(HttpException(404))
        OrdersController -->> Client: HTTP 404 Not Found
    end

    GhnAPI -->> GhnService: return district
    deactivate GhnAPI
    GhnService -->> OrdersController: return district
    deactivate GhnService
    OrdersController -> GhnService: getWardService(wardCode, districtCode)
    activate GhnService
    GhnService -> GhnAPI: GET /master-data/ward
    activate GhnAPI

    alt get fail
        GhnAPI -->> GhnService: return null
        GhnService -->> OrdersController: return null
        OrdersController --x OrdersController: throw(HttpException(404))
        OrdersController -->> Client: HTTP 404 Not Found
    end

    GhnAPI -->> GhnService: return ward
    deactivate GhnAPI
    GhnService -->> OrdersController: return ward
    deactivate GhnService
    OrdersController -> GeoapifyService: checkValidAddressService(fullAddress)
    activate GeoapifyService
    
    alt Invalid fullAddress
        GeoapifyService -->> OrdersController: return false
        OrdersController --x OrdersController: throw(HttpException(404))
        OrdersController -->> Client: HTTP 404 Not Found
    end

    GeoapifyService -->> OrdersController: return true
    deactivate GeoapifyService
    OrdersController -> OrdersWorker: createOrderJob()
    activate OrdersWorker

    alt create fail
        OrdersWorker --x OrdersController: throw Error
        OrdersController -->> Client: HTTP 500 Internal Server Error
    end

    OrdersWorker -->> OrdersController: return job
    deactivate OrdersWorker
    

end

break 
break 

group Transform data response
    OrdersController -> OrdersService: getOrderByIdService(id)
    activate OrdersService

    OrdersService -> OrderModel: findOne(filters)
    activate OrderModel
    OrderModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x OrderModel: throw Error
        OrderModel --x OrdersService: throw Error
        OrdersService --x OrdersController: throw Error
        OrdersController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> OrderModel: return orderDetail
    deactivate MongoDB
    OrderModel -->> OrdersService: return orderDetail
    deactivate OrderModel
    OrdersService -->> OrdersController: return orderDetail
    deactivate OrdersService
    
    OrdersController -> ModelDto: new(OrderDto)
    activate ModelDto
    ModelDto -->> OrdersController: return OrderDto 
    deactivate ModelDto

OrdersController --> Client: HTTP 200 Success
deactivate OrdersController
end

@enduml
