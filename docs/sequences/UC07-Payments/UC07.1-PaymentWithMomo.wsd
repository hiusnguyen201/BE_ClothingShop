@startuml Payment with momo

actor Client

participant PaymentsController
participant TransactionalServiceWrapper 
participant ModelDto
participant PaymentsService
participant OrdersService
participant HandleCreateOrder
participant OrderStatusHistoryService
participant OrderModel
participant PaymentModel
participant OrderStatusHistoryModel

database MongoDB

' Step 1
    activate Client
    Client -> PaymentsController: GET /api/payments/return-payment-momo
    activate PaymentsController

' step 2
group Business Logic Flow
    PaymentsController -> TransactionalServiceWrapper: execute()
    activate TransactionalServiceWrapper
    TransactionalServiceWrapper -> OrdersService: getOrderByIdService(orderId)
    activate OrdersService
    
    OrdersService -> OrderModel: findOne(filters)
    OrderModel -> MongoDB: quere select 
    activate MongoDB

    alt select fail 
        MongoDB --x OrderModel: throw Error
        OrderModel --x OrdersService: throw Error
        OrdersService --x TransactionalServiceWrapper: throw Error
        TransactionalServiceWrapper --x PaymentsController: throw Error
        PaymentsController -->> Client: HTTP 500 Internal Server Error
    else order not found
        MongoDB -->> OrderModel: return null
        OrderModel -->> OrdersService: return null
        OrdersService -->> TransactionalServiceWrapper: return null
        TransactionalServiceWrapper --x TransactionalServiceWrapper: throw(HttpException(404))
        TransactionalServiceWrapper --x PaymentsController: throw(HttpException(404))
        PaymentsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> OrderModel: return order
    deactivate MongoDB
    OrderModel -->> OrdersService: return order
    deactivate OrderModel
    OrdersService -->> TransactionalServiceWrapper: return order
    deactivate OrdersService
    
    alt payment failed
        TransactionalServiceWrapper -> HandleCreateOrder: updateOrderStatusUtils(orderId, newStatus, sessionId)
        activate HandleCreateOrder
        HandleCreateOrder -> OrderStatusHistoryService: newOrderStatusHistoryService()
        activate OrderStatusHistoryService
        OrderStatusHistoryService -> OrderStatusHistoryModel: new OrderStatusHistoryModel()
        activate OrderStatusHistoryModel
        OrderStatusHistoryModel -->> OrderStatusHistoryService: return OrderStatusHistoryModel instance
        deactivate OrderStatusHistoryModel
        OrderStatusHistoryService -->> HandleCreateOrder: return newOrderHistory
        deactivate OrderStatusHistoryService
        HandleCreateOrder -> HandleCreateOrder: save(session)
        HandleCreateOrder -> OrdersService: updateOrderStatusByIdService()
        activate OrdersService
        OrdersService -> OrderModel: findOneAndUpdate()
        OrderModel -> MongoDB: query update
        activate MongoDB

        alt update fail
            MongoDB --x OrderModel: throw Error
            OrderModel --x OrdersService: throw Error
            OrdersService --x HandleCreateOrder: throw Error
            HandleCreateOrder --x TransactionalServiceWrapper: throw Error
            TransactionalServiceWrapper --x PaymentsController: throw Error
            PaymentsController -->> Client: HTTP 500 Internal Server Error
        end

        MongoDB -->> OrderModel: return order
        deactivate MongoDB
        OrderModel -->> OrdersService: return order
        deactivate OrderModel
        OrdersService -->> HandleCreateOrder: return order
        deactivate OrdersService
        HandleCreateOrder -->> TransactionalServiceWrapper: return order
        deactivate HandleCreateOrder
        TransactionalServiceWrapper --x TransactionalServiceWrapper: throw(HttpException(400))
        TransactionalServiceWrapper --x PaymentsController: throw(HttpException(400))
        PaymentsController -->> Client: HTTP 400 Bad Request
    end

    TransactionalServiceWrapper -> PaymentsService: updatePaymentByIdService()
    activate PaymentsService
    PaymentsService -> PaymentModel: findByIdAndUpdate()
    activate PaymentModel
    PaymentModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x PaymentModel: throw Error
        PaymentModel --x PaymentsService: throw Error
        PaymentsService --x TransactionalServiceWrapper: throw Error
        TransactionalServiceWrapper --x PaymentsController: throw Error
        PaymentsController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> PaymentModel: return payment
    deactivate MongoDB
    PaymentModel -->> PaymentsService: return payment
    deactivate PaymentModel
    PaymentsService -->> TransactionalServiceWrapper: return payment
    deactivate PaymentsService
    TransactionalServiceWrapper -> OrderStatusHistoryService: newOrderStatusHistoryService()
    activate OrderStatusHistoryService
    OrderStatusHistoryService -> OrderStatusHistoryModel: new OrderStatusHistoryModel()
    activate OrderStatusHistoryModel
    OrderStatusHistoryModel -->> OrderStatusHistoryService: return OrderStatusHistoryModel instance
    deactivate OrderStatusHistoryModel
    OrderStatusHistoryService -->> TransactionalServiceWrapper: return newOrderHistory
    deactivate OrderStatusHistoryService
    TransactionalServiceWrapper -> TransactionalServiceWrapper: save(session)
    TransactionalServiceWrapper -> OrdersService: updateOrderStatusByIdService()
    activate OrdersService
    OrdersService -> OrderModel: findByIdAndUpdate()
    activate OrderModel
    OrderModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x OrderModel: throw Error
        OrderModel --x OrdersService: throw Error
        OrdersService --x TransactionalServiceWrapper: throw Error
        TransactionalServiceWrapper --x PaymentsController: throw Error
        PaymentsController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> OrderModel: return order
    deactivate MongoDB
    OrderModel -->> OrdersService: return order
    deactivate OrderModel
    OrdersService -->> TransactionalServiceWrapper: return order
    deactivate OrdersService

end

group Transform data response
    TransactionalServiceWrapper -> ModelDto: new(PaymentDto)
    activate ModelDto
    ModelDto -->> TransactionalServiceWrapper: return PaymentDto
    deactivate ModelDto
PaymentsController --> Client: HTTP 200 Success
deactivate PaymentsController
end



@enduml