@startuml View list Customer

actor Client

box "Application Layer"
participant CustomersRouter 
participant ErrorMiddleware 
participant AsyncHandler 
end box

box "Authentication"
participant JwtAuthMiddleware 
participant CookieUtil
participant AuthService
participant jsonwebtoken
end box


box "Validation"
participant RequestValidation
end box

box "Business Logic"
participant CustomersController
participant ApiResponse
participant UserService 
participant QueryUtil
participant UserModel
participant ModelDto
end box

database MongoDB

' Step 1
group Request Initialization
    Client -> CustomersRouter: GET /api/customers/get-customers
    activate Client
    activate CustomersRouter
    CustomersRouter -> AsyncHandler: asyncHandler(getAllCustomersController)
    activate AsyncHandler
end

break
break

' Step 2
group Authentication Flow
    AsyncHandler -> JwtAuthMiddleware: isAuthorizedAndHasPermission
    activate JwtAuthMiddleware

    JwtAuthMiddleware -> JwtAuthMiddleware: extract token
    alt token not provided
        JwtAuthMiddleware -> CookieUtil: clearSession(res)
        activate CookieUtil
        CookieUtil -->> JwtAuthMiddleware: return void
        deactivate CookieUtil
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end 

    JwtAuthMiddleware -> AuthService: verifyTokenService(token)
    activate AuthService
    AuthService -> jsonwebtoken: verify(token, SECRET)
    activate jsonwebtoken
    alt token invalid
        jsonwebtoken --x AuthService: throw Error
        AuthService -->> JwtAuthMiddleware: catch Error and return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    jsonwebtoken -->> AuthService: return data decoded
    deactivate jsonwebtoken
    AuthService -->> JwtAuthMiddleware: return data decoded
    deactivate AuthService
    JwtAuthMiddleware -> UserService: getUserByIdService(decoded.id)
    activate UserService
    UserService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UserService: return null
        UserService -->> JwtAuthMiddleware: return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UserService: return user
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return user
    deactivate UserService

    alt unverified account
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(403))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end
end

break
break

' Step 3
group Authorization Flow
    JwtAuthMiddleware -> UserService: checkUserHasPermissionService(userId, method, endpoint)
    activate UserService
    UserService -> UserModel: findById(id).populate(role).populate(permissions)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt User doesn't have permissions 
        MongoDB -->> UserModel: return empty permissions
        UserModel -->> UserService: return empty permissions
        UserService -->> JwtAuthMiddleware: return false
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return permissions
    deactivate MongoDB
    UserModel -->> UserService: return permissions
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return true
    deactivate UserService
end

break
break

' Step 4
group Validation Flow
    JwtAuthMiddleware -> RequestValidation: validateQuery(GetListCustomerDto)
    deactivate JwtAuthMiddleware
    activate RequestValidation
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    
end

break
break


' step 5
group Business Logic Flow
    RequestValidation -> CustomersController: getAllCustomersController
    deactivate RequestValidation
    activate CustomersController
    CustomersController -> UserService: getAndCountUsersService(filters, skip, limit, sortBy, sortOrder)
    activate UserService
    UserService -> UserModel:countDocuments(filters)
    activate UserModel
    UserModel -> MongoDB: query count
    activate MongoDB

    alt count fail
        MongoDB --x UserModel: throw Error
        UserModel --x UserService: throw Error
        UserService --x CustomersController: throw Error
        CustomersController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return count
    deactivate MongoDB
    UserModel -->> UserService: return count
    deactivate UserModel
    UserService -> QueryUtil: extendQueryOptionsWithPagination(skip, limit)
    activate QueryUtil
    QueryUtil -->> UserService: return options
    deactivate QueryUtil
    UserService -> QueryUtil: extendQueryOptionsWithSort(sortBy, sortOrder)
    activate QueryUtil
    QueryUtil -->> UserService: return options
    deactivate QueryUtil
    UserService -> UserModel: find(filters, options)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x UserModel: throw Error
        UserModel --x UserService: throw Error
        UserService --x CustomersController: throw Error
        CustomersController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return customers
    deactivate MongoDB
    UserModel -->> UserService: return customers
    deactivate UserModel
    UserService -->> CustomersController: return customers and count
    deactivate UserService


end
break
break

group Transform data response
    CustomersController -> ModelDto: newList(CustomerDto, customers)
    activate ModelDto
    ModelDto -->> CustomersController: return CustomerDto instance
    deactivate ModelDto

    CustomersController -> ApiResponse: success(CustomerDto, success message)
    activate ApiResponse
    ApiResponse -->> CustomersController: return ApiResponse instance
    deactivate ApiResponse 
end
CustomersController -->> AsyncHandler: return ApiResponse instance
deactivate CustomersController
AsyncHandler --> Client: HTTP 200 Success
deactivate AsyncHandler
deactivate CustomersRouter



@enduml