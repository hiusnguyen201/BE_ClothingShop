@startuml View list Customer

actor Client


participant CustomersController
participant ModelDto
participant RequestValidation
participant UserService 
participant QueryUtil
participant UserModel

database MongoDB

' Step 1
    activate Client
    Client -> CustomersController: GET /api/customers/get-customers
    activate CustomersController

break
break

' Step 4
group Validation Flow
    CustomersController -> RequestValidation: validateSchema(GetListCustomerDto)
    activate RequestValidation
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x CustomersController: throw HttpException(400)
        CustomersController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> CustomersController: return valid data
    deactivate RequestValidation
end

break
break


' step 5
group Business Logic Flow
    CustomersController -> UserService: getAndCountUsersService(filters, skip, limit, sortBy, sortOrder)
    activate UserService
    UserService -> UserModel:countDocuments(filters)
    activate UserModel
    UserModel -> MongoDB: query count
    activate MongoDB

    alt count fail
        MongoDB --x UserModel: throw Error
        UserModel --x UserService: throw Error
        UserService --x CustomersController: throw Error
        CustomersController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> UserModel: return count
    deactivate MongoDB
    UserModel -->> UserService: return count
    deactivate UserModel
    UserService -> QueryUtil: extendQueryOptionsWithPagination(skip, limit)
    activate QueryUtil
    QueryUtil -->> UserService: return options
    deactivate QueryUtil
    UserService -> QueryUtil: extendQueryOptionsWithSort(sortBy, sortOrder)
    activate QueryUtil
    QueryUtil -->> UserService: return options
    deactivate QueryUtil
    UserService -> UserModel: find(filters, options)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x UserModel: throw Error
        UserModel --x UserService: throw Error
        UserService --x CustomersController: throw Error
        CustomersController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> UserModel: return customers
    deactivate MongoDB
    UserModel -->> UserService: return customers
    deactivate UserModel
    UserService -->> CustomersController: return customers and count
    deactivate UserService


end
break
break

group Transform data response
    CustomersController -> ModelDto: newList(CustomerDto)
    activate ModelDto
    ModelDto -->> CustomersController: return CustomerDto 
    deactivate ModelDto
    CustomersController --> Client: HTTP 200 Success
    deactivate CustomersController
end




@enduml