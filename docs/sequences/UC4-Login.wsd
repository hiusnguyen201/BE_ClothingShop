@startuml Create Role Feature

' Participants
actor "Frontend" as FE
box "Application Layer" #LightBlue
participant "Express:App" as App
participant "Async:Handler" as AsyncHandler
participant "Error:Middleware" as ErrorMiddleware
end box

box "Authentication" #LightYellow
participant "JwtAuth:Middleware" as AuthMiddleware
participant "Auth:Service" as AuthService
participant "JWT" as JWT
end box

box "Authorization" #LightGreen
participant "Users:Service" as UserService
participant "User:Model" as UserModel
end box

box "Validation" #LightPink
participant "Validator:Middleware" as Validator
end box

box "Business Logic" #LightGray
participant "Roles:Controller" as Controller
participant "Roles:Service" as Service
participant "Role:Model" as RoleModel
participant "Model:Dto" as Dto
participant "Api:Response" as Response
end box

database MongoDB as DB

' Main Flow
group Request Initialization
    FE -> App: POST /api/roles
    activate App
    App -> AsyncHandler: asyncHandler(createRoleController)
    activate AsyncHandler
end

group Authentication Flow
    AsyncHandler -> AuthMiddleware: isAuthorized
    activate AuthMiddleware
    
    group Token Validation
        AuthMiddleware -> AuthMiddleware: extractToken(req.cookies)
        AuthMiddleware -> AuthService: verifyTokenService(token)
        activate AuthService
        AuthService -> JWT: verify(token, SECRET)
        
        alt token invalid
            JWT --> AuthService: Error
            AuthService --> AuthMiddleware: null
            AuthMiddleware -> ErrorMiddleware: next(error)
            ErrorMiddleware --> FE: HTTP 401 Unauthorized
        else token valid
            JWT --> AuthService: decoded
            AuthService --> AuthMiddleware: decoded
        end
        deactivate AuthService
    end
end

group Authorization Flow
    AuthMiddleware -> UserService: checkPermission(userId, "POST", "/api/roles")
    activate UserService
    UserService -> UserModel: findUserWithPermissions(id)
    UserModel -> DB: Aggregate query
    
    alt no permission
        DB --> UserModel: permissions[]
        UserModel --> UserService: false
        UserService -> ErrorMiddleware: next(error)
        ErrorMiddleware --> FE: HTTP 403 Access Denied
    else has permission
        DB --> UserModel: permissions
        UserModel --> UserService: true
        UserService --> AsyncHandler: next()
    end
    deactivate UserService
    deactivate AuthMiddleware
end

group Validation Flow
    AsyncHandler -> Validator: validateSchema(CreateRoleDto)
    activate Validator
    
    alt validation error
        Validator -> ErrorMiddleware: next(error)
        ErrorMiddleware --> FE: HTTP 400 Bad Request
    else validation ok
        Validator --> AsyncHandler: next()
    end
    deactivate Validator
end

group Business Logic Flow
    AsyncHandler -> Controller: createRole(req)
    activate Controller
    
    group Check Existing Role
        Controller -> Service: checkExistRoleName(name)
        activate Service
        Service -> RoleModel: findOne({name})
        RoleModel -> DB: Query
        
        alt name exists
            DB --> RoleModel: role
            RoleModel --> Service: true
            Service -> ErrorMiddleware: next(error)
            ErrorMiddleware --> FE: HTTP 409 Conflict
        else name available
            DB --> RoleModel: null
            RoleModel --> Service: false
            
            group Create Role
                Controller -> Service: createRole(data)
                Service -> RoleModel: create(data)
                RoleModel -> DB: Insert
                DB --> RoleModel: newRole
                RoleModel --> Service: newRole
                Service --> Controller: newRole
                
                Controller -> Dto: transform(RoleDto, newRole)
                Dto --> Controller: roleDto
                Controller -> Response: ApiResponse.success(roleDto)
                Response --> AsyncHandler: response
                AsyncHandler --> FE: HTTP 200 Success
            end
        end
        deactivate Service
    end
    deactivate Controller
end

deactivate AsyncHandler
deactivate App

@enduml