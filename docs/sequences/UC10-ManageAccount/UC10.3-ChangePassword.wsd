@startuml Update User Profile

actor Client

box "Application Layer"
participant AccountRouter 
participant ErrorMiddleware 
participant AsyncHandler 
end box

box "Authentication"
participant JwtAuthMiddleware 
participant CookieUtil
participant AuthService
participant jsonwebtoken
end box

box "Validation"
participant RequestValidation
end box

box "Business Logic"
participant AccountController
participant ModelDto
participant ApiResponse
participant AccountService
participant UsersService
participant UserModel
end box

database MongoDB

' Step 1
group Request Initialization
    Client -> AccountRouter: POST /api/account/change-password
    activate Client
    activate AccountRouter
    AccountRouter -> AsyncHandler: asyncHandler(changePasswordController)
    activate AsyncHandler
end

break
break

' Step 2
group Authentication Flow
    AsyncHandler -> JwtAuthMiddleware: isAuthorized
    activate JwtAuthMiddleware

    JwtAuthMiddleware -> JwtAuthMiddleware: extract token
    alt token not provided
        JwtAuthMiddleware -> CookieUtil: clearSession(res)
        activate CookieUtil
        CookieUtil -->> JwtAuthMiddleware: return void
        deactivate CookieUtil
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end 

    JwtAuthMiddleware -> AuthService: verifyTokenService(token)
    activate AuthService
    AuthService -> jsonwebtoken: verify(token, SECRET)
    activate jsonwebtoken
    alt token invalid
        jsonwebtoken --x AuthService: throw Error
        AuthService -->> JwtAuthMiddleware: catch Error and return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    jsonwebtoken -->> AuthService: return data decoded
    deactivate jsonwebtoken
    AuthService -->> JwtAuthMiddleware: return data decoded
    deactivate AuthService
    JwtAuthMiddleware -> UsersService: getUserByIdService(decoded.id)
    activate UsersService
    UsersService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UsersService: return null
        UsersService -->> JwtAuthMiddleware: return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UsersService: return user
    deactivate UserModel
    UsersService -->> JwtAuthMiddleware: return user
    deactivate UsersService

    alt unverified account
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(403))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end
end

break
break

' Step 3
group Validation Flow
    JwtAuthMiddleware -> RequestValidation: validateBody(ChangePasswordDto)
    deactivate JwtAuthMiddleware
    activate RequestValidation
    
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
end

break
break



' Step 4
group Business Logic Flow
    RequestValidation -> AccountController: changePasswordController
    deactivate RequestValidation
    activate AccountController
    AccountController -> AccountService: comparePasswordService(userId, password)   
    AccountService -> UserModel: findById(userId)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x UserModel: throw Error
        UserModel --x AccountService: throw Error
        AccountService --x AccountController: throw Error
        AccountController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return password
    deactivate MongoDB
    UserModel -->> AccountService: return password
    deactivate UserModel
    AccountService -> AccountService: compare(password, userPassword)
    AccountService -->> AccountController: return true
    deactivate AccountService
    AccountController -> AuthService: changePasswordByIdService(userId, newPassword)
    activate AuthService
    AuthService -> AuthService: genSaltSync()
    AuthService -> AuthService: hashSync(password, salt)
    AuthService -> UserModel: findByIdAndUpdate(userId, newPassword)
    activate UserModel
    UserModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x UserModel: throw Error
        UserModel --x AuthService: throw Error
        AuthService --x AccountController: throw Error
        AccountController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return password
    deactivate MongoDB
    UserModel -->> AuthService: return password
    deactivate UserModel
    AuthService -->> AccountController: return password
    deactivate AuthService


          
end
break 
break 

group Transform data response
    AccountController -> ModelDto: new(UserDto, updatedUser)
    activate ModelDto
    ModelDto -->> AccountController: return UserDto instance
    deactivate ModelDto

    AccountController -> ApiResponse: success(UserDto, success message)
    activate ApiResponse
    ApiResponse -->> AccountController: return ApiResponse instance
    deactivate ApiResponse 
end
    
AccountController -->> AsyncHandler: return ApiResponse instance
deactivate AccountController
AsyncHandler --> Client: HTTP 200 Success
deactivate AsyncHandler
deactivate AccountRouter




@enduml