@startuml Change Password

actor Client
participant AccountController
participant ModelDto
participant RequestValidation
participant AuthService
participant AccountService
participant UserModel
database MongoDB

activate Client
Client -> AccountController: POST /api/account/change-password
activate AccountController

group Authentication Flow
    AccountController -> AuthService: validateAuthToken(token)
    activate AuthService
    
    alt invalid token
        AuthService --x AuthService: throw HttpException(401)
        AuthService --x AccountController: throw HttpException(401)
        AccountController -->> Client: HTTP 401 Unauthorized
    end

    AuthService -> AccountController: return userData
    deactivate AuthService
end

group Validation Flow
    AccountController -> RequestValidation: validateSchema(ChangePasswordDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x AccountController: throw HttpException(400)
        AccountController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> AccountController: return valid data
    deactivate RequestValidation
end

group Business Logic Flow
    AccountController -> AccountService: comparePasswordService(userId, password)
    activate AccountService
    AccountService -> UserModel: findById(userId)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt password mismatch
        MongoDB -->> UserModel: return user
        UserModel -->> AccountService: return user
        AccountService -> AccountService: compare(password, userPassword)
        AccountService -->> AccountController: return false
        AccountController -->> Client: HTTP 400 Bad Request
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> AccountService: return user
    AccountService -> AccountService: compare(password, userPassword)
    AccountService -->> AccountController: return true
    deactivate AccountService

    AccountController -> AuthService: changePasswordByIdService(userId, newPassword)
    activate AuthService
    AuthService -> AuthService: hashPassword(newPassword)
    AuthService -> UserModel: findByIdAndUpdate(userId, { password: hashedPassword })
    activate UserModel
    UserModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x UserModel: throw Error
        UserModel --x AuthService: throw Error
        AuthService --x AccountController: throw Error
        AccountController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> UserModel: return updatedUser
    deactivate MongoDB
    UserModel -->> AuthService: return updatedUser
    deactivate UserModel
    AuthService -->> AccountController: return updatedUser
    deactivate AuthService
end

group Transform data
    AccountController -> ModelDto: new(UserDto)
    activate ModelDto
    ModelDto -> AccountController: return userDto
    deactivate ModelDto

    AccountController --> Client: HTTP 200 Success
    deactivate AccountController
end

deactivate Client

@enduml