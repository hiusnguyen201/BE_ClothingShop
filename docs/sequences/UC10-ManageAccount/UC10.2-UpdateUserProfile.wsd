@startuml Update User Profile

actor Client
participant AccountController
participant ModelDto
participant RequestValidation
participant AuthService
participant UsersService
participant UserModel
database MongoDB

activate Client
Client -> AccountController: PUT /api/account/edit-profile
activate AccountController

group Authentication Flow
    AccountController -> AuthService: validateAuthToken(token)
    activate AuthService
    
    alt invalid token
        AuthService --x AuthService: throw HttpException(401)
        AuthService --x AccountController: throw HttpException(401)
        AccountController -->> Client: HTTP 401 Unauthorized
    end

    AuthService -> AccountController: return userData
    deactivate AuthService
end

group Validation Flow
    AccountController -> RequestValidation: validateSchema(EditProfileDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x AccountController: throw HttpException(400)
        AccountController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> AccountController: return valid data
    deactivate RequestValidation
end

group Business Logic Flow
    AccountController -> UsersService: checkExistEmailService(email, userId)
    activate UsersService
    
    UsersService -> UserModel: findOne({ email, _id: { $ne: userId } })
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt email exists
        MongoDB -->> UserModel: return user
        UserModel -->> UsersService: return user
        UsersService -->> AccountController: return user
        AccountController -->> Client: HTTP 400 Bad Request
    end

    MongoDB -->> UserModel: return null
    deactivate MongoDB
    UserModel -->> UsersService: return null
    deactivate UserModel
    UsersService -->> AccountController: return null
    deactivate UsersService

    AccountController -> UsersService: updateUserInfoByIdService(userId, userInfo)
    activate UsersService
    UsersService -> UserModel: findByIdAndUpdate(userId, userInfo)
    activate UserModel
    UserModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x AccountController: throw Error
        AccountController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> UserModel: return updatedUser
    deactivate MongoDB
    UserModel -->> UsersService: return updatedUser
    deactivate UserModel
    UsersService -->> AccountController: return updatedUser
    deactivate UsersService
end

group Transform data
    AccountController -> ModelDto: new(UserDto)
    activate ModelDto
    ModelDto -> AccountController: return userDto
    deactivate ModelDto

    AccountController --> Client: HTTP 200 Success
    deactivate AccountController
end

deactivate Client

@enduml