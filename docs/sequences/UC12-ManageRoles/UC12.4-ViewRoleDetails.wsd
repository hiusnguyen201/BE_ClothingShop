@startuml Role Details

actor Client

participant RolesController
participant ModelDto
participant RequestValidation
participant RolesService
participant RoleModel
database MongoDB

activate Client
Client -> RolesController: GET /api/roles/get-role-by-id/:roleId
activate RolesController

break
break

group Validation Flow
    RolesController -> RequestValidation: validateSchema(GetRoleDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x RolesController: throw HttpException(400)
        RolesController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> RolesController: return valid data
end

break
break

group Business Logic Flow
    activate RolesController
    RolesController -> RolesService: getRoleByIdService(roleId)
    activate RolesService

    RolesService -> RoleModel: findOne(filter)
    activate RoleModel
    RoleModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x RoleModel: throw Error
        RoleModel --x RolesService: throw Error
        RolesService --x RolesController: throw Error
        RolesController -->> Client: HTTP 500 Internal Server Error
    else role not found
        MongoDB -->> RoleModel: return null
        RoleModel -->> RolesService: return null
        RolesService -->> RolesController: return null
        RolesController --x RolesController: throw HttpException(404)
        RolesController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> RoleModel: return role
    deactivate MongoDB
    RoleModel -->> RolesService: return role
    deactivate RoleModel
    RolesService -->> RolesController: return role
    deactivate RolesService
end

break
break

group Transform data
    RolesController -> ModelDto: new(RoleDto)
    activate ModelDto
    ModelDto -> RolesController: return roleDto
    deactivate ModelDto

    RolesController --> Client: HTTP 200 Success
    deactivate RolesController
end

@enduml