@startuml Update Role

actor Client

box "Application Layer"
participant RolesRouter 
participant ErrorMiddleware 
participant AsyncHandler 
end box

box "Authentication"
participant JwtAuthMiddleware 
participant CookieUtil
participant AuthService
participant jsonwebtoken
end box

box "Authorization"
participant UserService 
participant UserModel
end box

box "Validation"
participant RequestValidation
end box

box "Business Logic"
participant RolesController
participant ModelDto
participant ApiResponse
participant RolesService
participant RoleModel
participant StringUtil
end box

database MongoDB

' Step 1
group Request Initialization
    Client -> RolesRouter: PUT /api/roles/update-role-by-id/:roleId
    activate Client
    activate RolesRouter
    RolesRouter -> AsyncHandler: asyncHandler(updateRoleByIdController)
    activate AsyncHandler
end

break
break

' Step 2
group Authentication Flow
    AsyncHandler -> JwtAuthMiddleware: isAuthorizedAndHasPermission
    activate JwtAuthMiddleware

    JwtAuthMiddleware -> JwtAuthMiddleware: extract token
    alt token not provided
        JwtAuthMiddleware -> CookieUtil: clearSession(res)
        activate CookieUtil
        CookieUtil -->> JwtAuthMiddleware: return void
        deactivate CookieUtil
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end 

    JwtAuthMiddleware -> AuthService: verifyTokenService(token)
    activate AuthService
    AuthService -> jsonwebtoken: verify(token, SECRET)
    activate jsonwebtoken
    alt token invalid
        jsonwebtoken --x AuthService: throw Error
        AuthService -->> JwtAuthMiddleware: catch Error and return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    jsonwebtoken -->> AuthService: return data decoded
    deactivate jsonwebtoken
    AuthService -->> JwtAuthMiddleware: return data decoded
    deactivate AuthService
    JwtAuthMiddleware -> UserService: getUserByIdService(decoded.id)
    activate UserService
    UserService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UserService: return null
        UserService -->> JwtAuthMiddleware: return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UserService: return user
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return user
    deactivate UserService

    alt unverified account
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(403))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end
end

break
break

' Step 3
group Authorization Flow
    JwtAuthMiddleware -> UserService: checkUserHasPermissionService(userId, method, endpoint)
    activate UserService
    UserService -> UserModel: findById(id).populate(role).populate(permissions)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt User doesn't have permissions 
        MongoDB -->> UserModel: return empty permissions
        UserModel -->> UserService: return empty permissions
        UserService -->> JwtAuthMiddleware: return false
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return permissions
    deactivate MongoDB
    UserModel -->> UserService: return permissions
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return true
    deactivate UserService
end

break
break

' Step 4
group Validation Flow
    JwtAuthMiddleware -> RequestValidation: validateParams(GetRoleDto)
    deactivate JwtAuthMiddleware
    activate RequestValidation
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    
    RequestValidation -> RequestValidation: validateBody(UpdateRoleDto)
    
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
end

break
break

' Step 5
group Business Logic Flow
    RequestValidation -> RolesController: updateRoleByIdController
    deactivate RequestValidation
    activate RolesController
    RolesController -> RolesService: getRoleByIdService(roleId)
    activate RolesService
    
    alt roleId not provided
        RolesService -->> RolesController: return null
        RolesController --x RolesController: throw(HttpException(400))
        RolesController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

    RolesService -> RoleModel: findOne(filter)
    activate RoleModel
    RoleModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x RoleModel: throw Error
        RoleModel --x RolesService: throw Error
        RolesService --x RolesController: throw Error
        RolesController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
        
        else role not found
        MongoDB -->> RoleModel: return null
        RoleModel -->> RolesService: return null
        RolesService -->> RolesController: return null
        RolesController --x RolesController: throw(HttpException(404))
        RolesController --x AsyncHandler: catch HttpException and next(HttpException(404))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
    end



    MongoDB -->> RoleModel: return role
    deactivate MongoDB
    RoleModel -->> RolesService: return role
    deactivate RoleModel
    RolesService -->> RolesController: return role
    deactivate RolesService

    RolesController -> RolesService: checkExistRoleNameService(name, existRole._id)
    activate RolesService
    RolesService -> RoleModel: fineOne(filters)
    activate RoleModel
    RoleModel -> MongoDB: query select
    activate MongoDB

    alt Role name already exists
        MongoDB -->> RoleModel: return role
        RoleModel -->> RolesService: return role
        RolesService -->> RolesController: return true
        RolesController --x RolesController : throw HttpException(409)
        RolesController ->> AsyncHandler : catch HttpException and next(HttpException(409))
        AsyncHandler ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 409 Conflict
        deactivate ErrorMiddleware
    end

    MongoDB -->> RoleModel: return null
    deactivate MongoDB
    RoleModel -->> RolesService: return null
    deactivate RoleModel
    RolesService -->> RolesController: return false
    deactivate RolesService
    RolesController -> RolesService: updateRoleInfoByIdService(existRole._id, req.body)
    activate RolesService
    RolesService -> StringUtil: makeSlug(data.name)
    activate StringUtil
    StringUtil -->> RolesService: return slug
    deactivate StringUtil
    RolesService -> RoleModel: findByIdAndUpdate(id, data)
    activate RoleModel
    RoleModel -> MongoDB: query update
    activate MongoDB

    alt update false
        MongoDB --x RoleModel: throw Error
        RoleModel --x RolesService: throw Error
        RolesService --x RolesController: throw Error
        RolesController ->> AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> RoleModel: return role
    deactivate MongoDB
    RoleModel -->> RolesService: return role
    deactivate RoleModel
    RolesService -->> RolesController: return role
    deactivate RolesService
    
end
break 
break

group Transform data response
    RolesController -> ModelDto: new(RoleDto, updatedRole)
    activate ModelDto
    ModelDto -->> RolesController: return RoleDto instance
    deactivate ModelDto

    RolesController -> ApiResponse: success(RoleDto, success message)
    activate ApiResponse
    ApiResponse -->> RolesController: return ApiResponse instance
    deactivate ApiResponse 
end
    
RolesController -->> AsyncHandler: return ApiResponse instance
deactivate RolesController
AsyncHandler --> Client: HTTP 200 Success
deactivate AsyncHandler
deactivate RolesRouter


@enduml