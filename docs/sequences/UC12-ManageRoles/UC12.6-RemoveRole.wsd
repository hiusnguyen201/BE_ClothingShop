@startuml Remove Role

actor Client
participant RolesController
participant ModelDto
participant RequestValidation
participant RolesService
participant RoleModel
database MongoDB

activate Client
Client -> RolesController: DELETE /api/roles/remove-role-by-id/:roleId
activate RolesController

group Validation Flow
    RolesController -> RequestValidation: validateSchema(RemoveRoleDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x RolesController: throw HttpException(400)
        RolesController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> RolesController: return valid data
    deactivate RequestValidation
end

break
break

group Business Logic Flow
    RolesController -> RolesService: getRoleByIdOrFailService(roleId)
    activate RolesService
    
    RolesService -> RoleModel: findOne(filter)
    activate RoleModel
    RoleModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x RoleModel: throw Error
        RoleModel --x RolesService: throw Error
        RolesService --x RolesController: throw Error
        RolesController -->> Client: HTTP 500 Server Error
    else role not found
        MongoDB -->> RoleModel: return null
        RoleModel -->> RolesService: return null
        RolesService -->> RolesController: return null
        RolesController --x RolesController: throw HttpException(404)
        RolesController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> RoleModel: return role
    deactivate MongoDB
    RoleModel -->> RolesService: return role
    deactivate RoleModel
    RolesService -->> RolesController: return role
    deactivate RolesService

    RolesController -> RolesService: removeRoleByIdOrFailService(roleId)
    activate RolesService
    RolesService -> RoleModel: findByIdAndSoftDelete(roleId)
    activate RoleModel
    RoleModel -> MongoDB: query update
    activate MongoDB

    alt delete fail
        MongoDB --x RoleModel: throw Error
        RoleModel --x RolesService: throw Error
        RolesService --x RolesController: throw Error
        RolesController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> RoleModel: return role
    deactivate MongoDB
    RoleModel -->> RolesService: return role
    deactivate RoleModel
    RolesService -->> RolesController: return role
    deactivate RolesService
end


RolesController --> Client: HTTP 200 Success
deactivate RolesController


@enduml