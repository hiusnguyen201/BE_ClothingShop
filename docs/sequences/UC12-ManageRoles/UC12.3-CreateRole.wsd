@startuml Create Role

actor Client

' box "Authentication"
' participant JwtAuthMiddleware 
' participant AuthService
' end box

' box "Authorization"
' participant UserService 
' participant UserModel
' end box

' box "Business Logic"
participant RolesController

participant ModelDto

participant RequestValidation

participant RolesService
participant RoleModel
' end box



database MongoDB

' Step 1
activate Client
Client -> RolesController: POST /api/roles/create-role
activate RolesController

break
break

' ' Step 2
' group Authentication Flow
'     RolesRouter -> JwtAuthMiddleware: authenticate and authorize
'     activate JwtAuthMiddleware

'     JwtAuthMiddleware -> JwtAuthMiddleware: extract token
'     alt token not provided
'         JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
'         JwtAuthMiddleware -->> Client: HTTP 401 Unauthorized
'         deactivate ErrorMiddleware
'     end 

'     JwtAuthMiddleware -> AuthService: verify token
'     activate AuthService
'     alt token invalid
'         AuthService -->> JwtAuthMiddleware: catch Error and return null
'         JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
'         JwtAuthMiddleware -->> Client: HTTP 401 Unauthorized
'         deactivate ErrorMiddleware
'     end

'     AuthService -->> JwtAuthMiddleware: return data decoded
'     deactivate AuthService
'     JwtAuthMiddleware -> UserService: getUserByIdService(decoded.id)
'     activate UserService
'     UserService -> UserModel: findOne(filters)
'     activate UserModel
'     UserModel -> MongoDB: query select
'     activate MongoDB

'     alt user not found
'         MongoDB -->> UserModel: return null
'         UserModel -->> UserService: return null
'         UserService -->> JwtAuthMiddleware: return null
'         JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
'         JwtAuthMiddleware -->> Client: HTTP 401 Unauthorized
'         deactivate ErrorMiddleware
'     end

'     MongoDB -->> UserModel: return user
'     deactivate MongoDB
'     UserModel -->> UserService: return user
'     deactivate UserModel
'     UserService -->> JwtAuthMiddleware: return user
'     deactivate UserService

'     alt unverified account
'         JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(403))
'         JwtAuthMiddleware -->> Client: HTTP 403 Forbidden
'         deactivate ErrorMiddleware
'     end
' end

' break
' break

' ' Step 3
' group Authorization Flow
'     JwtAuthMiddleware -> UserService: checkUserHasPermissionService(userId, method, endpoint)
'     activate UserService
'     UserService -> UserModel: findById(id).populate(role).populate(permissions)
'     activate UserModel
'     UserModel -> MongoDB: query select
'     activate MongoDB

'     alt User doesn't have permissions 
'         MongoDB -->> UserModel: return empty permissions
'         UserModel -->> UserService: return empty permissions
'         UserService -->> JwtAuthMiddleware: return false
'         JwtAuthMiddleware -->> Client: HTTP 403 Forbidden
'         deactivate ErrorMiddleware
'     end

'     MongoDB -->> UserModel: return permissions
'     deactivate MongoDB
'     UserModel -->> UserService: return permissions
'     deactivate UserModel
'     UserService -->> JwtAuthMiddleware: return true
'     deactivate UserService
' end

' break
' break

' Step 4
group Validation Flow
    RolesController -> RequestValidation: validateSchema(CreateRoleDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x RolesController: throw HttpException(400)
        RolesController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> RolesController: return valid data
    deactivate RequestValidation
end

break
break

' Step 5
group Business Logic Flow
    ' RequestValidation -> RolesController: createRoleController
    RolesController -> RolesService: checkExistRoleNameService(name)
    activate RolesService
    RolesService -> RoleModel: fineOne(filters)
    activate RoleModel
    RoleModel -> MongoDB: query select
    activate MongoDB

    alt Role name already exists
        MongoDB -->> RoleModel: return role
        RoleModel -->> RolesService: return role
        RolesService -->> RolesController: return true
        RolesController --x RolesController : throw HttpException(409)
        RolesController -->> Client: HTTP 409 Conflict
    end

    MongoDB -->> RoleModel: return null
    deactivate MongoDB
    RoleModel -->> RolesService: return null
    deactivate RoleModel
    RolesService -->> RolesController: return false
    deactivate RolesService

    RolesController -> RolesService: createRoleService(data)
    activate RolesService
    RolesService -> RoleModel: create(data)
    activate RoleModel
    RoleModel -> MongoDB: query create
    activate MongoDB

    alt Create fail
        MongoDB --x RoleModel: throw Error
        RoleModel --x RolesService: throw Error
        RolesService --x RolesController: throw Error
        RolesController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> RoleModel: return role
    deactivate MongoDB
    RoleModel -->> RolesService: return role
    deactivate RoleModel
    RolesService -->> RolesController: return role
    deactivate RolesService
end


break
break

group Transform data
    RolesController -> ModelDto: new(RoleDto)
    activate ModelDto
    ModelDto -> RolesController: return roleDto
    deactivate ModelDto

    RolesController --> Client: HTTP 200 Success
    deactivate RolesController
end

@enduml
