@startuml Remove Category

actor Client


participant CategoriesController
participant RequestValidation
participant CategoriesService
participant CategoryModel

database MongoDB

' Step 1
    activate Client
    Client -> CategoriesController: DELETE /api/categories/remove-category-by-id/:categoryId
    activate CategoriesController

break
break


' Step 4
group Validation Flow
    CategoriesController -> RequestValidation: validateSchema(GetCategoryDto)
    activate RequestValidation
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x CategoriesController: throw HttpException(400)
        CategoriesController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> CategoriesController: return valid data
    deactivate RequestValidation
end

break
break


' Step 5
group Business Logic Flow
    CategoriesController -> CategoriesService: getCategoryByIdService(categoryId)
    activate CategoriesService
    CategoriesService -> CategoryModel: findOne(filters)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    else category not found
        MongoDB -->> CategoryModel: return null
        CategoryModel -->> CategoriesService: return null
        CategoriesService -->> CategoriesController: return null
        CategoriesController --x CategoriesController: throw(HttpException(404))
        CategoriesController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return category
    deactivate CategoriesService
    CategoriesController -> CategoriesService: countSubcategoriesService(categoryId)
    activate CategoriesService
    CategoriesService -> CategoryModel: countDocuments(filters)
    activate CategoryModel
    CategoryModel -> MongoDB: query count
    activate MongoDB

    alt count fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    else count success
        MongoDB -->> CategoryModel: return count
        CategoryModel -->> CategoriesService: return count
        CategoriesService -->> CategoriesController: return count
        CategoriesController --x CategoriesController: throw(HttpException(400))
        CategoriesController -->> Client: HTTP 400 Bad Request

    end
    
    MongoDB -->> CategoryModel: return null
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return null
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return null
    deactivate CategoriesService
    CategoriesController -> CategoriesService: removeCategoryByIdService(categoryId)
    activate CategoriesService
    CategoriesService -> CategoryModel: findByIdAndSoftDelete(id)
    activate CategoryModel
    CategoryModel -> MongoDB: query update
    activate MongoDB

    alt Update fail
        MongoDB --x CategoryModel: throw error
        CategoryModel --x CategoriesService: throw error
        CategoriesService --x CategoriesController: throw error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return category
    deactivate CategoriesService


end


CategoriesController --> Client: HTTP 200 Success
deactivate CategoriesController

@enduml