@startuml View List Categories

actor Client

participant CategoriesController
participant ModelDto
participant RequestValidation
participant CategoriesService
participant QueryUtil
participant CategoryModel

database MongoDB

' Step 1
    activate Client
    Client -> CategoriesController: GET /api/categories/get-categories
    activate CategoriesController
' Step 4
group Validation Flow
    CategoriesController -> RequestValidation: validateSchema(GetListCategoryDto)
    activate RequestValidation
   alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x CategoriesController: throw HttpException(400)
        CategoriesController -->> Client: HTTP 400 Bad Request
    end
    deactivate RequestValidation
        RequestValidation -->> CategoriesController: return valid data
    deactivate RequestValidation
end

break
break


' Step 5
group Business Logic Flow
    CategoriesController -> CategoriesService: getAndCountCategoriesService()
    activate CategoriesService
    CategoriesService -> QueryUtil: extendQueryOptionsWithPagination(skip, limit)
    activate QueryUtil
    QueryUtil -->> CategoriesService: return Options
    deactivate QueryUtil
    CategoriesService -> QueryUtil: extendQueryOptionsWithSort(sortBy, sortOrder)
    activate QueryUtil
    QueryUtil -->> CategoriesService: return Options
    deactivate QueryUtil
    CategoriesService -> CategoryModel: aggregate(filters, options)
    activate CategoryModel
    CategoryModel -> MongoDB: query aggregate
    activate MongoDB

    alt aggregate fail
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> CategoryModel: return list categories
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return list categories
    deactivate CategoryModel
    CategoriesService -> CategoryModel: aggregate(filters, options)
    activate CategoryModel
    CategoryModel -> MongoDB: query aggregate
    activate MongoDB

    alt aggregate fail
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> CategoryModel: return totalCount
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return totalCount
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return totalCount and list categories
    deactivate CategoriesService

end

group Transform data response
    CategoriesController -> ModelDto: newList(CategoryDto)
    activate ModelDto
    ModelDto -->> CategoriesController: return CategoryDto 
    deactivate ModelDto
    CategoriesController --> Client: HTTP 200 Success
    deactivate CategoriesController
  
end




@enduml