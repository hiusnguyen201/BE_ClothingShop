@startuml Create Category

actor Client


participant CategoriesController
participant ModelDto
participant RequestValidation
participant CategoriesService
participant CloudinaryService
participant CategoryModel

database MongoDB
database Cloudinary

' Step 1
    activate Client
    Client -> CategoriesController: POST /api/categories/create-categories
    activate CategoriesController

' Step 5
group Validation Flow
    CategoriesController -> RequestValidation: validateSchema(createCategoryDto)
    activate RequestValidation
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x CategoriesController: throw HttpException(400)
        CategoriesController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> CategoriesController: return valid data
    deactivate RequestValidation
end

break
break


' Step 6
group Business Logic Flow
    CategoriesController -> CategoriesService: checkExistCategoryNameService(name)
    activate CategoriesService
    CategoriesService -> CategoryModel: findOne(filters)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    else name category already exists
        MongoDB -->> CategoryModel: return true
        CategoryModel -->> CategoriesService: return true
        CategoriesService -->> CategoriesController: return true
        CategoriesController --x CategoriesController: throw(HttpException(400))
        CategoriesController -->> Client: HTTP 400 Bad Request
    end
    
    MongoDB -->> CategoryModel: return false
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return false
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return false
    deactivate CategoriesService
    CategoriesController -> CategoriesService: newCategoryService(category)
    activate CategoriesService
    CategoriesService -> CategoryModel: new CategoryModel()
    activate CategoryModel
    CategoryModel -->> CategoriesService: return instance
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return instance
    deactivate CategoriesService
    CategoriesController -> CategoriesService: getCategoryByIdService(parentId)
    activate CategoriesService

    CategoriesService -> CategoryModel: findOne(filters)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    else category not found
        MongoDB -->> CategoryModel: return null
        CategoryModel -->> CategoriesService: return null
        CategoriesService -->> CategoriesController: return null
        CategoriesController --x CategoriesController: throw(HttpException(404))
        CategoriesController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return category
    deactivate CategoriesService
    CategoriesController -> CloudinaryService: uploadImageBufferService(buffer, folderName)
    activate CloudinaryService
    CloudinaryService -> CloudinaryService: sharp(buffer)
    CloudinaryService -> Cloudinary: upLoad_stream(buffer, options)
    activate Cloudinary

    alt upload fail
        Cloudinary --x CloudinaryService: throw Error
        CloudinaryService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    end

    Cloudinary -->> CloudinaryService: return imageUrl
    deactivate Cloudinary
    CloudinaryService -->> CategoriesController: return imageUrl
    deactivate CloudinaryService
    CategoriesController -> CategoriesService: saveCategoryService(category)
    activate CategoriesService
    CategoriesService -> CategoryModel: save()
    activate CategoryModel
    CategoryModel -> MongoDB: query create
    activate MongoDB

    alt create fail
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return category
    deactivate CategoriesService


end

group Transform data response
    CategoriesController -> ModelDto: new(CategoryDto)
    activate ModelDto
    ModelDto -->> CategoriesController: return CategoryDto 
    deactivate ModelDto
    CategoriesController --> Client: HTTP 200 Success
    deactivate CategoriesController
end



@enduml