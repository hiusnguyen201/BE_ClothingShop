@startuml Create Category

actor Client

box "Application Layer"
participant CategoriesRouter 
participant ErrorMiddleware 
participant AsyncHandler 
end box

box "Authentication"
participant JwtAuthMiddleware 
participant CookieUtil
participant AuthService
participant jsonwebtoken
end box

box "Authorization"
participant UserService 
participant UserModel
end box

box "Upload Image"
participant UploadUtil
participant multer
end box

box "Validation"
participant RequestValidation
end box

box "Business Logic"
participant CategoriesController
participant ModelDto
participant ApiResponse
participant CategoriesService
participant CloudinaryService
participant QueryUtil
participant CategoryModel
end box

database MongoDB
database Cloudinary

' Step 1
group Request Initialization
    Client -> CategoriesRouter: POST /api/categories/create-categories
    activate Client
    activate CategoriesRouter
    CategoriesRouter -> AsyncHandler: asyncHandler(createCategoryController)
    activate AsyncHandler
end

break
break

' Step 2
group Authentication Flow
    AsyncHandler -> JwtAuthMiddleware: isAuthorized
    activate JwtAuthMiddleware

    JwtAuthMiddleware -> JwtAuthMiddleware: extract token
    alt token not provided
        JwtAuthMiddleware -> CookieUtil: clearSession(res)
        activate CookieUtil
        CookieUtil -->> JwtAuthMiddleware: return void
        deactivate CookieUtil
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end 

    JwtAuthMiddleware -> AuthService: verifyTokenService(token)
    activate AuthService
    AuthService -> jsonwebtoken: verify(token, SECRET)
    activate jsonwebtoken
    alt token invalid
        jsonwebtoken --x AuthService: throw Error
        AuthService -->> JwtAuthMiddleware: catch Error and return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    jsonwebtoken -->> AuthService: return data decoded
    deactivate jsonwebtoken
    AuthService -->> JwtAuthMiddleware: return data decoded
    deactivate AuthService
    JwtAuthMiddleware -> UserService: getUserByIdOrFailService(decoded.id)
    activate UserService
    UserService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UserService: return null
        UserService -->> JwtAuthMiddleware: return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UserService: return user
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return user
    deactivate UserService

    alt unverified account
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(403))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end
end

break
break

' Step 3
group Authorization Flow
    JwtAuthMiddleware -> UserService: checkUserHasPermissionService(userId, method, endpoint)
    activate UserService
    UserService -> UserModel: findById(id).populate(role).populate(permissions)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt User doesn't have permissions 
        MongoDB -->> UserModel: return empty permissions
        UserModel -->> UserService: return empty permissions
        UserService -->> JwtAuthMiddleware: return false
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return permissions
    deactivate MongoDB
    UserModel -->> UserService: return permissions
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return true
    deactivate UserService
end

break
break

' Step 4
group Upload Image Flow
    JwtAuthMiddleware -> UploadUtil: single({ field: 'image' })
    deactivate JwtAuthMiddleware
    activate UploadUtil
    UploadUtil -> multer: multerUpload()
    activate multer

    alt invalid file type
        multer --x UploadUtil: return Error
        UploadUtil --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware

    else Limit file size
        multer --x UploadUtil: return Error
        UploadUtil --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware

    else Limit file count
        multer --x UploadUtil: return Error
        UploadUtil --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end 

    multer -->> UploadUtil: return next()
    deactivate multer   

end

break 
break

' Step 5
group Validation Flow
    UploadUtil -> RequestValidation: validateSchema(CreateCategoryDto)
    deactivate UploadUtil
    activate RequestValidation
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
end

break
break


' Step 6
group Business Logic Flow
    RequestValidation -> CategoriesController: createCategoryController
    deactivate RequestValidation
    activate CategoriesController
    CategoriesController -> CategoriesService: checkExistCategoryNameService(name)
    activate CategoriesService
    CategoriesService -> CategoryModel: findOne(filters)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware

    else name category already exists
        MongoDB -->> CategoryModel: return true
        CategoryModel -->> CategoriesService: return true
        CategoriesService -->> CategoriesController: return true
        CategoriesController --x CategoriesController: throw(HttpException(400))
        CategoriesController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    
    MongoDB -->> CategoryModel: return false
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return false
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return false
    deactivate CategoriesService
    CategoriesController -> CategoriesService: newCategoryService(category)
    activate CategoriesService
    CategoriesService -> CategoryModel: new CategoryModel()
    activate CategoryModel
    CategoryModel -->> CategoriesService: return instance
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return instance
    deactivate CategoriesService
    CategoriesController -> CategoriesService: getCategoryByIdService(parentId)
    activate CategoriesService

    alt parentId not provided
        CategoriesService -->> CategoriesController: return null
        CategoriesController --x CategoriesController: throw(HttpException(400))
        CategoriesController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

    CategoriesService -> CategoryModel: findOne(filters)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    else category not found
        MongoDB -->> CategoryModel: return null
        CategoryModel -->> CategoriesService: return null
        CategoriesService -->> CategoriesController: return null
        CategoriesController --x CategoriesController: throw(HttpException(404))
        CategoriesController --x AsyncHandler: catch HttpException and next(HttpException(404))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
    end

    MongoDB -->> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return category
    deactivate CategoriesService
    CategoriesController -> CloudinaryService: uploadImageBufferService(buffer, folderName)
    activate CloudinaryService
    CloudinaryService -> CloudinaryService: sharp(buffer)
    CloudinaryService -> Cloudinary: upLoad_stream(buffer, options)
    activate Cloudinary

    alt upload fail
        Cloudinary --x CloudinaryService: throw Error
        CloudinaryService --x CategoriesController: throw Error
        CategoriesController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    Cloudinary -->> CloudinaryService: return imageUrl
    deactivate Cloudinary
    CloudinaryService -->> CategoriesController: return imageUrl
    deactivate CloudinaryService
    CategoriesController -> CategoriesService: saveCategoryService(category)
    activate CategoriesService
    CategoriesService -> CategoryModel: save()
    activate CategoryModel
    CategoryModel -> MongoDB: query create
    activate MongoDB

    alt create fail
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x CategoriesController: throw Error
        CategoriesController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> CategoriesController: return category
    deactivate CategoriesService


end

group Transform data response
    CategoriesController -> ModelDto: new(CategoryDto, category)
    activate ModelDto
    ModelDto -->> CategoriesController: return CategoryDto instance
    deactivate ModelDto

    CategoriesController -> ApiResponse: success(TotalCount, CategoryDto, success message)
    activate ApiResponse
    ApiResponse -->> CategoriesController: return ApiResponse instance
    deactivate ApiResponse 
end

CategoriesController -->> AsyncHandler: return ApiResponse instance
deactivate CategoriesController
AsyncHandler --> Client: HTTP 200 Success
deactivate AsyncHandler
deactivate CategoriesRouter

@enduml