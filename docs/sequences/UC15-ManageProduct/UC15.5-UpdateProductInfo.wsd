@startuml Update Product Info

actor Client

box "Application Layer"
participant ProductRouter 
participant ErrorMiddleware 
participant AsyncHandler 
end box

box "Authentication"
participant JwtAuthMiddleware 
participant CookieUtil
participant AuthService
participant jsonwebtoken
end box

box "Authorization"
participant UserService 
participant UserModel
end box

box "Upload Image"
participant UploadUtil
participant multer
end box

box "Validation"
participant RequestValidation
end box

box "Business Logic"
participant ProductsController
participant ModelDto
participant ApiResponse
participant ProductsService
participant CloudinaryService
participant StringUtil
participant CategoriesService
participant CategoryModel
participant ProductModel
end box

database MongoDB
database Cloudinary

' Step 1
group Request Initialization
    Client -> ProductRouter: PUT /api/products/update-product-info/:productId
    activate Client
    activate ProductRouter
    ProductRouter -> AsyncHandler: asyncHandler(updateProductInfoController)
    activate AsyncHandler
end

break
break

' Step 2
group Authentication Flow
    AsyncHandler -> JwtAuthMiddleware: isAuthorizedAndHasPermission
    activate JwtAuthMiddleware

    JwtAuthMiddleware -> JwtAuthMiddleware: extract token
    alt token not provided
        JwtAuthMiddleware -> CookieUtil: clearSession(res)
        activate CookieUtil
        CookieUtil -->> JwtAuthMiddleware: return void
        deactivate CookieUtil
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end 

    JwtAuthMiddleware -> AuthService: verifyTokenService(token)
    activate AuthService
    AuthService -> jsonwebtoken: verify(token, SECRET)
    activate jsonwebtoken
    alt token invalid
        jsonwebtoken --x AuthService: throw Error
        AuthService -->> JwtAuthMiddleware: catch Error and return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    jsonwebtoken -->> AuthService: return data decoded
    deactivate jsonwebtoken
    AuthService -->> JwtAuthMiddleware: return data decoded
    deactivate AuthService
    JwtAuthMiddleware -> UserService: getUserByIdService(decoded.id)
    activate UserService
    UserService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UserService: return null
        UserService -->> JwtAuthMiddleware: return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UserService: return user
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return user
    deactivate UserService

    alt unverified account
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(403))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end
end

break
break

' Step 3
group Authorization Flow
    JwtAuthMiddleware -> UserService: checkUserHasPermissionService(userId, method, endpoint)
    activate UserService
    UserService -> UserModel: findById(id).populate(role).populate(permissions)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt User doesn't have permissions 
        MongoDB -->> UserModel: return empty permissions
        UserModel -->> UserService: return empty permissions
        UserService -->> JwtAuthMiddleware: return false
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return permissions
    deactivate MongoDB
    UserModel -->> UserService: return permissions
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return true
    deactivate UserService
end

break
break

' Step 4
group Upload Image Flow
    JwtAuthMiddleware -> UploadUtil: single({ field: 'thumbnail' })
    deactivate JwtAuthMiddleware
    activate UploadUtil
    UploadUtil -> multer: multerUpload()
    activate multer

    alt invalid file type
        multer --x UploadUtil: return Error
        UploadUtil --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware

    else Limit file size
        multer --x UploadUtil: return Error
        UploadUtil --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware

    else Limit file count
        multer --x UploadUtil: return Error
        UploadUtil --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end 

    multer -->> UploadUtil: return next()
    deactivate multer   

end

break 
break

' Step 5
group Validation Flow
    UploadUtil -> RequestValidation: validateSchema(GetProductDto)
    deactivate UploadUtil
    activate RequestValidation
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    RequestValidation -> RequestValidation: validateSchema(updateProductInfoDto)
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

end

break
break


' Step 6
group Business Logic Flow
    RequestValidation -> ProductsController: updateProductInfoController
    deactivate RequestValidation
    activate ProductsController
    ProductsController -> ProductsService: getProductByIdService(productId)
    activate ProductsService

    alt productId not provided
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    else product not found
        MongoDB -->> ProductModel: return null
        ProductModel -->> ProductsService: return null
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(404))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
    end

    MongoDB -->> ProductModel: return product
    deactivate MongoDB
    ProductModel -->> ProductsService: return product
    deactivate ProductModel
    ProductsService -->> ProductsController: return product
    deactivate ProductsService
    ProductsController -> ProductsService: checkExistProductNameService(name, id)
    activate ProductsService
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error)
        ProductsController ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    else Exist product name
        MongoDB -->> ProductModel: return product
        ProductModel -->> ProductsService: return product
        ProductsService -->> ProductsController: return product
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

    MongoDB -->> ProductModel: return null
    deactivate MongoDB
    ProductModel -->> ProductsService: return null
    deactivate ProductModel
    ProductsService -->> ProductsController: return null
    deactivate ProductsService
    ProductsController -> CategoriesService: getCategoryByIdService(category)
    activate CategoriesService

    alt id not provided
        CategoriesService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

    CategoriesService -> CategoryModel: findOne(filter)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB
    MongoDB -> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> ProductsController: return category
    deactivate CategoriesService
    ProductsController -> CategoriesService: getCategoryByIdService(subCategory)
    activate CategoriesService

    alt id not provided
        CategoriesService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

    CategoriesService -> CategoryModel: findOne(filter)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB
    MongoDB -> CategoryModel: return subCategory
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return subCategory
    deactivate CategoryModel
    CategoriesService -->> ProductsController: return subCategory
    deactivate CategoriesService
    ProductsController -> CloudinaryService: uploadImageBufferService()
    activate CloudinaryService
    CloudinaryService -> CloudinaryService: sharp(buffer)
    CloudinaryService -> Cloudinary: upLoad_stream(buffer, options)
    activate Cloudinary

    alt upload fail
        Cloudinary --x CloudinaryService: throw Error
        CloudinaryService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    Cloudinary -->> CloudinaryService: return imageUrl
    deactivate Cloudinary
    CloudinaryService -->> ProductsController: return imageUrl
    deactivate CloudinaryService
    ProductsController -> ProductsService: createProductService()
    activate ProductsService
    ProductsService -> StringUtil: makeSlug()
    activate StringUtil
    StringUtil -->> ProductsService: return slug
    deactivate StringUtil
    ProductsService -> ProductModel: create(product)
    activate ProductModel
    ProductModel -> MongoDB: query create
    activate MongoDB

    alt create fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> ProductModel: return newProduct
    deactivate MongoDB
    ProductModel -->> ProductsService: return newProduct
    deactivate ProductModel
    ProductsService -->> ProductsController: return newProduct
    deactivate ProductsService

   

end

group Transform data response
    ProductsController -> ModelDto: new(ProductDto, newProduct)
    activate ModelDto
    ModelDto -->> ProductsController: return ProductDto instance
    deactivate ModelDto

    ProductsController -> ApiResponse: success(ProductDto)
    activate ApiResponse
    ApiResponse -->> ProductsController: return ApiResponse instance
    deactivate ApiResponse 
end

ProductsController -->> AsyncHandler: return ApiResponse instance
deactivate ProductsController
AsyncHandler --> Client: HTTP 200 Success
deactivate AsyncHandler
deactivate ProductRouter

@enduml