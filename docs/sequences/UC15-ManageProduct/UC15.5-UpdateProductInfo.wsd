@startuml Update Product Info

actor Client


participant ProductsController
participant ModelDto
participant RequestValidation
participant ProductsService
participant CloudinaryService
participant StringUtil
participant CategoriesService
participant CategoryModel
participant ProductModel
database MongoDB
database Cloudinary


    activate Client
    Client -> ProductsController: PUT /api/products/update-product-info/:productId
    activate ProductsController

' Step 5
group Validation Flow
    ProductsController -> RequestValidation: validateSchema(GetProductDto)
    activate RequestValidation
        alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x ProductsController: throw HttpException(400)
        ProductsController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -> RequestValidation: validateSchema(updateProductInfoDto)
     alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x ProductsController: throw HttpException(400)
        ProductsController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> ProductsController: return valid data
    deactivate RequestValidation
end

break
break


' Step 6
group Business Logic Flow
    ProductsController -> ProductsService: getProductByIdService(productId)
    activate ProductsService
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    else product not found
        MongoDB -->> ProductModel: return null
        ProductModel -->> ProductsService: return null
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> ProductModel: return product
    deactivate MongoDB
    ProductModel -->> ProductsService: return product
    deactivate ProductModel
    ProductsService -->> ProductsController: return product
    deactivate ProductsService
    ProductsController -> ProductsService: checkExistProductNameService(name, id)
    activate ProductsService
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    else Exist product name
        MongoDB -->> ProductModel: return product
        ProductModel -->> ProductsService: return product
        ProductsService -->> ProductsController: return product
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController -->> Client: HTTP 400 Bad Request
    end

    MongoDB -->> ProductModel: return null
    deactivate MongoDB
    ProductModel -->> ProductsService: return null
    deactivate ProductModel
    ProductsService -->> ProductsController: return null
    deactivate ProductsService
    ProductsController -> CategoriesService: getCategoryByIdService(category)
    activate CategoriesService
    CategoriesService -> CategoryModel: findOne(filter)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB
    MongoDB -> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> ProductsController: return category
    deactivate CategoriesService
    ProductsController -> CategoriesService: getCategoryByIdService(subCategory)
    activate CategoriesService
    CategoriesService -> CategoryModel: findOne(filter)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB
    MongoDB -> CategoryModel: return subCategory
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return subCategory
    deactivate CategoryModel
    CategoriesService -->> ProductsController: return subCategory
    deactivate CategoriesService
    ProductsController -> CloudinaryService: uploadImageBufferService()
    activate CloudinaryService
    CloudinaryService -> CloudinaryService: sharp(buffer)
    CloudinaryService -> Cloudinary: upLoad_stream(buffer, options)
    activate Cloudinary

    alt upload fail
        Cloudinary --x CloudinaryService: throw Error
        CloudinaryService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    end

    Cloudinary -->> CloudinaryService: return imageUrl
    deactivate Cloudinary
    CloudinaryService -->> ProductsController: return imageUrl
    deactivate CloudinaryService
    ProductsController -> ProductsService: createProductService()
    activate ProductsService
    ProductsService -> StringUtil: makeSlug()
    activate StringUtil
    StringUtil -->> ProductsService: return slug
    deactivate StringUtil
    ProductsService -> ProductModel: create(product)
    activate ProductModel
    ProductModel -> MongoDB: query create
    activate MongoDB

    alt create fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> ProductModel: return newProduct
    deactivate MongoDB
    ProductModel -->> ProductsService: return newProduct
    deactivate ProductModel
    ProductsService -->> ProductsController: return newProduct
    deactivate ProductsService

   

end

group Transform data response
    ProductsController -> ModelDto: new(ProductDto)
    activate ModelDto
    ModelDto -->> ProductsController: return ProductDto 
    deactivate ModelDto
    ProductsController --> Client: HTTP 200 Success
deactivate ProductsController
end
@enduml