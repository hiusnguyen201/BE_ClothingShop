@startuml Update Product Variant

actor Client



participant ProductsController
participant ModelDto
participant RequestValidation
participant ProductsService
participant TransactionalServiceWrapper
participant ProductVariantsService
participant OptionsService
participant ObjectUtil
participant OptionModel
participant CategoryModel
participant ProductModel

database MongoDB

' Step 1
    activate Client
    Client -> ProductsController: PUT /api/products/update-product-variants/:productId
    activate ProductsController

break
break


' Step 4
group Validation Flow
    ProductsController -> RequestValidation: validateSchema(GetProductDto)
    activate RequestValidation
        alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x ProductsController: throw HttpException(400)
        ProductsController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -> RequestValidation: validateSchema(updateProductInfoDto)
     alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x ProductsController: throw HttpException(400)
        ProductsController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> ProductsController: return valid data
    deactivate RequestValidation
end


' Step 5
group Business Logic Flow
    ProductsController -> ProductsService: getProductByIdService(productId)
    activate ProductsService
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    else product not found
        MongoDB -->> ProductModel: return null
        ProductModel -->> ProductsService: return null
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> ProductModel: return product
    deactivate MongoDB
    ProductModel -->> ProductsService: return product
    deactivate ProductModel
    ProductsService -->> ProductsController: return product
    deactivate ProductsService
    ProductsController -> TransactionalServiceWrapper: execute()
    activate TransactionalServiceWrapper
    TransactionalServiceWrapper -> ProductsService: removeProductVariantsByProductIdService()
    activate ProductsService
    ProductsService -->> TransactionalServiceWrapper: void
    deactivate ProductsService
    TransactionalServiceWrapper -> OptionsService: getOptionByIdService()
    activate OptionsService        
    OptionsService -> OptionModel: findOne(filter)
    activate OptionModel
    OptionModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x OptionModel: throw Error
        OptionModel --x OptionsService: throw Error
        OptionsService --x TransactionalServiceWrapper: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    else option not found
        MongoDB -->> OptionModel: return null
        OptionModel -->> OptionsService: return null
        OptionsService -->> TransactionalServiceWrapper: return null
        TransactionalServiceWrapper --x TransactionalServiceWrapper: throw(HttpException(404))
        ProductsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> OptionModel: return option
    deactivate MongoDB
    OptionModel -->> OptionsService: return option
    deactivate OptionModel
    OptionsService -->> TransactionalServiceWrapper: return option
    deactivate OptionsService
    TransactionalServiceWrapper -->> ProductsController: return option
    deactivate TransactionalServiceWrapper
    ProductsController -> ObjectUtil: makeUniqueProductVariants(productVariants)
    activate ObjectUtil
    ObjectUtil -->> ProductsController: return uniqueProductVariants
    deactivate ObjectUtil
    ProductsController -> ProductVariantsService: newProductVariantsService({...})
    activate ProductVariantsService
    ProductVariantsService -->> ProductsController: return productVariantInstance
    deactivate ProductVariantsService
    ProductsController -> OptionsService: getOptionByIdService()
    activate OptionsService

    OptionsService -> OptionModel: findOne(filter)
    activate OptionModel
    OptionModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x OptionModel: throw Error
        OptionModel --x OptionsService: throw Error
        OptionsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    else option not found
        MongoDB -->> OptionModel: return null
        OptionModel -->> OptionsService: return null
        OptionsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> OptionModel: return option
    deactivate MongoDB
    OptionModel -->> OptionsService: return option
    deactivate OptionModel
    OptionsService -->> ProductsController: return option
    deactivate OptionsService
    ProductsController -> ProductVariantsService: saveProductVariantsService(productVariantsInstance)
    activate ProductVariantsService
    ProductVariantsService -->> ProductsController: return createdProductVariants
    deactivate ProductVariantsService
    ProductsController -> ProductsService: updateProductVariantsByIdService()
    activate ProductsService
    ProductsService -> ProductModel: updateOne()
    activate ProductModel
    ProductModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> ProductModel: return updatedProduct
    deactivate MongoDB
    ProductModel -->> ProductsService: return updatedProduct
    deactivate ProductModel
    ProductsService -->> ProductsController: return updatedProduct
    deactivate ProductsService

end

group Transform data response
    ProductsController -> ProductsService: getProductByIdService(productId)
    activate ProductsService
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    else product not found
        MongoDB -->> ProductModel: return null
        ProductModel -->> ProductsService: return null
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> ProductModel: return product
    deactivate MongoDB
    ProductModel -->> ProductsService: return product
    deactivate ProductModel
    ProductsService -->> ProductsController: return product
    deactivate ProductsService
    ProductsController -> ModelDto: new(ProductDto)
    activate ModelDto
    ModelDto -->> ProductsController: return ProductDto 
    deactivate ModelDto
    ProductsController --> Client: HTTP 200 Success
deactivate ProductsController
end



@enduml