@startuml Update Product Variant

actor Client

box "Application Layer"
participant ProductRouter 
participant ErrorMiddleware 
participant AsyncHandler 
end box

box "Authentication"
participant JwtAuthMiddleware 
participant CookieUtil
participant AuthService
participant jsonwebtoken
end box

box "Authorization"
participant UserService 
participant UserModel
end box

box "Validation"
participant RequestValidation
end box

box "Business Logic"
participant ProductsController
participant ModelDto
participant ApiResponse
participant ProductsService
participant TransactionalServiceWrapper
participant ProductVariantsService
participant OptionsService
participant ObjectUtil
participant OptionModel
participant CategoryModel
participant ProductModel
end box

database MongoDB

' Step 1
group Request Initialization
    Client -> ProductRouter: PUT /api/products/update-product-variants/:productId
    activate Client
    activate ProductRouter
    ProductRouter -> AsyncHandler: asyncHandler(updateProductVariantsController)
    activate AsyncHandler
end

break
break

' Step 2
group Authentication Flow
    AsyncHandler -> JwtAuthMiddleware: isAuthorized
    activate JwtAuthMiddleware

    JwtAuthMiddleware -> JwtAuthMiddleware: extract token
    alt token not provided
        JwtAuthMiddleware -> CookieUtil: clearSession(res)
        activate CookieUtil
        CookieUtil -->> JwtAuthMiddleware: return void
        deactivate CookieUtil
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end 

    JwtAuthMiddleware -> AuthService: verifyTokenService(token)
    activate AuthService
    AuthService -> jsonwebtoken: verify(token, SECRET)
    activate jsonwebtoken
    alt token invalid
        jsonwebtoken --x AuthService: throw Error
        AuthService -->> JwtAuthMiddleware: catch Error and return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    jsonwebtoken -->> AuthService: return data decoded
    deactivate jsonwebtoken
    AuthService -->> JwtAuthMiddleware: return data decoded
    deactivate AuthService
    JwtAuthMiddleware -> UserService: getUserByIdOrFailService(decoded.id)
    activate UserService
    UserService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UserService: return null
        UserService -->> JwtAuthMiddleware: return null
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(401))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 401 Unauthorized
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UserService: return user
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return user
    deactivate UserService

    alt unverified account
        JwtAuthMiddleware ->> JwtAuthMiddleware: next(HttpException(403))
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end
end

break
break

' Step 3
group Authorization Flow
    JwtAuthMiddleware -> UserService: checkUserHasPermissionService(userId, method, endpoint)
    activate UserService
    UserService -> UserModel: findById(id).populate(role).populate(permissions)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt User doesn't have permissions 
        MongoDB -->> UserModel: return empty permissions
        UserModel -->> UserService: return empty permissions
        UserService -->> JwtAuthMiddleware: return false
        JwtAuthMiddleware ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 403 Forbidden
        deactivate ErrorMiddleware
    end

    MongoDB -->> UserModel: return permissions
    deactivate MongoDB
    UserModel -->> UserService: return permissions
    deactivate UserModel
    UserService -->> JwtAuthMiddleware: return true
    deactivate UserService
end

break
break

' Step 4
group Validation Flow
    UploadUtil -> RequestValidation: validateSchema(GetProductDto)
    deactivate UploadUtil
    activate RequestValidation
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    RequestValidation -> RequestValidation: validateSchema(updateProductVariantsDto)
    alt validation error
        RequestValidation ->> RequestValidation: next(HttpException(400))
        RequestValidation ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

end

break
break


' Step 5
group Business Logic Flow
    RequestValidation -> ProductsController: updateProductVariantsController
    deactivate RequestValidation
    activate ProductsController
    ProductsController -> ProductsService: getProductByIdService(productId)
    activate ProductsService

    alt productId not provided
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    else product not found
        MongoDB -->> ProductModel: return null
        ProductModel -->> ProductsService: return null
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(404))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
    end

    MongoDB -->> ProductModel: return product
    deactivate MongoDB
    ProductModel -->> ProductsService: return product
    deactivate ProductModel
    ProductsService -->> ProductsController: return product
    deactivate ProductsService
    ProductsController -> TransactionalServiceWrapper: execute()
    activate TransactionalServiceWrapper
    TransactionalServiceWrapper -> ProductsService: removeProductVariantsByProductIdService()
    activate ProductsService
    ProductsService -->> TransactionalServiceWrapper: void
    deactivate ProductsService
    TransactionalServiceWrapper -> OptionsService: getOptionByIdService()
    activate OptionsService        

    alt id not provided
        OptionsService -->> TransactionalServiceWrapper: return null
        TransactionalServiceWrapper --x TransactionalServiceWrapper: throw(HttpException(400))
        TransactionalServiceWrapper --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

    OptionsService -> OptionModel: findOne(filter)
    activate OptionModel
    OptionModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x OptionModel: throw Error
        OptionModel --x OptionsService: throw Error
        OptionsService --x TransactionalServiceWrapper: throw Error
        TransactionalServiceWrapper --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    else option not found
        MongoDB -->> OptionModel: return null
        OptionModel -->> OptionsService: return null
        OptionsService -->> TransactionalServiceWrapper: return null
        TransactionalServiceWrapper --x TransactionalServiceWrapper: throw(HttpException(404))
        TransactionalServiceWrapper --x AsyncHandler: catch HttpException and next(HttpException(404))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
    end

    MongoDB -->> OptionModel: return option
    deactivate MongoDB
    OptionModel -->> OptionsService: return option
    deactivate OptionModel
    OptionsService -->> TransactionalServiceWrapper: return option
    deactivate OptionsService
    TransactionalServiceWrapper -->> ProductsController: return option
    deactivate TransactionalServiceWrapper
    ProductsController -> ObjectUtil: makeUniqueProductVariants(productVariants)
    activate ObjectUtil
    ObjectUtil -->> ProductsController: return uniqueProductVariants
    deactivate ObjectUtil
    TransactionalServiceWrapper -> ProductVariantsService: newProductVariantsService({...})
    activate ProductVariantsService
    ProductVariantsService -->> ProductsController: return productVariantInstance
    deactivate ProductVariantsService
    ProductsController -> OptionsService: getOptionByIdService()
    activate OptionsService

     alt id not provided
        OptionsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end

    OptionsService -> OptionModel: findOne(filter)
    activate OptionModel
    OptionModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x OptionModel: throw Error
        OptionModel --x OptionsService: throw Error
        OptionsService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    else option not found
        MongoDB -->> OptionModel: return null
        OptionModel -->> OptionsService: return null
        OptionsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(404))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
    end

    MongoDB -->> OptionModel: return option
    deactivate MongoDB
    OptionModel -->> OptionsService: return option
    deactivate OptionModel
    OptionsService -->> ProductsController: return option
    deactivate OptionsService
    ProductsController -> ProductVariantsService: saveProductVariantsService(productVariantsInstance)
    activate ProductVariantsService
    ProductVariantsService -->> ProductsController: return createdProductVariants
    deactivate ProductVariantsService
    ProductsController -> ProductsService: updateProductVariantsByIdService()
    activate ProductsService
    ProductsService -> ProductModel: updateOne()
    activate ProductModel
    ProductModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    end

    MongoDB -->> ProductModel: return updatedProduct
    deactivate MongoDB
    ProductModel -->> ProductsService: return updatedProduct
    deactivate ProductModel
    ProductsService -->> ProductsController: return updatedProduct
    deactivate ProductsService


   

end

group Transform data response
    ProductsController -> ProductsService: getProductByIdService(productId)
    activate ProductsService
    alt productId not provided
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(400))
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 400 Bad Request
        deactivate ErrorMiddleware
    end
    ProductsService -> ProductModel: findOne(filter)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController --x AsyncHandler: catch Error and next(Error)
        AsyncHandler ->> ErrorMiddleware: handleError(Error) 
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 500 Internal Server Error
        deactivate ErrorMiddleware
    else product not found
        MongoDB -->> ProductModel: return null
        ProductModel -->> ProductsService: return null
        ProductsService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController --x AsyncHandler: catch HttpException and next(HttpException(404))
        AsyncHandler ->> ErrorMiddleware: handleError(Error)
        ProductsController ->> ErrorMiddleware: handleError(Error)
        activate ErrorMiddleware
        ErrorMiddleware -->> Client: HTTP 404 Not Found
        deactivate ErrorMiddleware
    end

    MongoDB -->> ProductModel: return product
    deactivate MongoDB
    ProductModel -->> ProductsService: return product
    deactivate ProductModel
    ProductsService -->> ProductsController: return product
    deactivate ProductsService
    ProductsController -> ModelDto: new(ProductDto, product)
    activate ModelDto
    ModelDto -->> ProductsController: return ProductDto instance
    deactivate ModelDto

    ProductsController -> ApiResponse: success(ProductDto)
    activate ApiResponse
    ApiResponse -->> ProductsController: return ApiResponse instance
    deactivate ApiResponse 
end

ProductsController -->> AsyncHandler: return ApiResponse instance
deactivate ProductsController
AsyncHandler --> Client: HTTP 200 Success
deactivate AsyncHandler
deactivate ProductRouter

@enduml