@startuml List Product

actor Client
participant ProductsController
participant ModelDto
participant RequestValidation
participant ProductsService
participant QueryUtil
participant ProductModel

database MongoDB

' Step 1
    activate Client
    Client -> ProductsController: GET /api/products/get-products
    activate ProductsController



' Step 4
group Validation Flow
   ProductsController -> RequestValidation: validateSchema(GetListProductDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x ProductsController: throw HttpException(400)
        ProductsController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -> ProductsController: return valid data
    deactivate RequestValidation
end

break
break


' Step 5
group Business Logic Flow
    activate ProductsController
    ProductsController -> ProductsService: countAllProductsService(filterOptions)
    activate ProductsService
    ProductsService -> ProductModel: countDocuments(filters)
    activate ProductModel
    ProductModel -> MongoDB: query count 
    activate MongoDB

    alt count false
        MongoDB --x ProductModel:throw Error
        ProductModel --x ProductsService:throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500  Server Error
    end

    MongoDB -->> ProductModel: return count
    deactivate MongoDB
    ProductModel -->> ProductsService: return count
    deactivate ProductModel
    ProductsService -->> ProductsController: return count
    deactivate ProductsService
    ProductsController -> ProductsService: getAllProductsService(filters, page, limit, sortBy, sortOrder)
    activate ProductsService
    ProductsService -> ProductModel: find(filters)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500  Server Error
    end

    MongoDB -->> ProductModel: return products
    deactivate MongoDB
    ProductModel -->> ProductsService: return products
    deactivate ProductModel
    ProductsService -->> ProductsController: return products
    deactivate ProductsService
    
end

group Transform data response
    ProductsController -> ModelDto: newList(ProductDto)
    activate ModelDto
    ModelDto -->> ProductsController: return ProductDto
    deactivate ModelDto
    ProductsController --> Client: HTTP 200 Success
    deactivate ProductsController
end

@enduml