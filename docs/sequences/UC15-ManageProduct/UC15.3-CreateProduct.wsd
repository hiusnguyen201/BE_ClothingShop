@startuml Create Products

actor Client


participant ProductsController
participant ModelDto
participant RequestValidation
participant ProductsService
participant CloudinaryService
participant StringUtil
participant CategoriesService
participant CategoryModel
participant ProductModel


database MongoDB
database Cloudinary

' Step 1
    activate Client
    Client -> ProductsController: POST /api/products/create-product
    activate ProductsController
break
break

' Step 5
group Validation Flow
    ProductsController -> RequestValidation: validateSchema(CreateProductDto)
    activate RequestValidation
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x ProductsController: throw HttpException(400)
        ProductsController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> ProductsController: return valid data
    deactivate RequestValidation
end

break
break


' Step 6
group Business Logic Flow
    ProductsController -> ProductsService: checkExistProductNameService(name)
    activate ProductsService
    ProductsService -> ProductModel: findOne(filters)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Server Error

    else name product already exists
        MongoDB -->> ProductModel: return true
        ProductModel -->> ProductsService: return true
        ProductsService -->> ProductsController: return true
        ProductsController --x ProductsController: throw(HttpException(400))
        ProductsController -->> Client: HTTP 400 Bad Request
    end
    
    MongoDB -->> ProductModel: return false
    deactivate MongoDB
    ProductModel -->> ProductsService: return false
    deactivate ProductModel
    ProductsService -->> ProductsController: return false
    deactivate ProductsService
    ProductsController -> CategoriesService: getCategoryByIdService(category)
    activate CategoriesService
    CategoriesService -> CategoryModel: findOne(filter)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Server Error
    else category not found
        MongoDB -->> CategoryModel: return null
        CategoryModel -->> CategoriesService: return null
        CategoriesService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> CategoryModel: return category
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return category
    deactivate CategoryModel
    CategoriesService -->> ProductsController: return category
    deactivate CategoriesService
    ProductsController -> CategoriesService: getCategoryByIdService(subCategory)
    activate CategoriesService
    CategoriesService -> CategoryModel: findOne(filter)
    activate CategoryModel
    CategoryModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x CategoryModel: throw Error
        CategoryModel --x CategoriesService: throw Error
        CategoriesService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Server Error
    else category not found
        MongoDB -->> CategoryModel: return null
        CategoryModel -->> CategoriesService: return null
        CategoriesService -->> ProductsController: return null
        ProductsController --x ProductsController: throw(HttpException(404))
        ProductsController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> CategoryModel: return subcategory
    deactivate MongoDB
    CategoryModel -->> CategoriesService: return subcategory
    deactivate CategoryModel
    CategoriesService -->> ProductsController: return subcategory
    deactivate CategoriesService
    ProductsController -> CloudinaryService: uploadImageBufferService(buffer, folderName)
    activate CloudinaryService
    CloudinaryService -> CloudinaryService: sharp(buffer)
    CloudinaryService -> Cloudinary: upLoad_stream(buffer, options)
    activate Cloudinary

    alt upload fail
        Cloudinary --x CloudinaryService: throw Error
        CloudinaryService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    end

    Cloudinary -->> CloudinaryService: return imageUrl
    deactivate Cloudinary
    CloudinaryService -->> ProductsController: return imageUrl
    deactivate CloudinaryService
    ProductsController -> ProductsService: createProductService()
    activate ProductsService
    ProductsService -> StringUtil: makeSlug(name)
    activate StringUtil
    StringUtil -->> ProductsService: return slug
    deactivate StringUtil
    ProductsService -> ProductModel: create(data)
    activate ProductModel
    ProductModel -> MongoDB: query create
    activate MongoDB

    alt create fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> ProductModel: return product
    deactivate MongoDB
    ProductModel -->> ProductsService: return product
    deactivate ProductModel
    ProductsService -->> ProductsController: return product
    deactivate ProductsService

end

group Transform data response
    ProductsController -> ModelDto: new(ProductDto)
    activate ModelDto
    ModelDto -->> ProductsController: return ProductDto 
    deactivate ModelDto
    ProductsController --> Client: HTTP 200 Success
    deactivate ProductsController
end

@enduml