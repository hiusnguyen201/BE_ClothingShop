@startuml Register

actor Client
participant AuthController
participant ModelDto
participant RequestValidation
participant UsersService
participant UserModel
database MongoDB

activate Client
Client -> AuthController: POST /api/auth/register
activate AuthController

group Validation Flow
    AuthController -> RequestValidation: validateSchema(RegisterUserDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x AuthController: throw HttpException(400)
        AuthController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> AuthController: return valid data
    deactivate RequestValidation
end

group Business Logic Flow
    AuthController -> UsersService: checkExistEmailService(email)
    activate UsersService
    UsersService -> UserModel: findOne({ email })
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt email exists
        MongoDB -->> UserModel: return user
        UserModel -->> UsersService: return user
        UsersService -->> AuthController: return user
        AuthController -->> Client: HTTP 400 Bad Request
    else query fail
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> UserModel: return null
    deactivate MongoDB
    UserModel -->> UsersService: return null
    deactivate UserModel
    UsersService -->> AuthController: return null
    deactivate UsersService

    AuthController -> UsersService: createUserService(registerDto)
    activate UsersService
    UsersService -> UsersService: hashPassword(password)
    UsersService -> UserModel: create(userData)
    activate UserModel
    UserModel -> MongoDB: query create
    activate MongoDB

    alt create fail
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> UserModel: return newUser
    deactivate MongoDB
    UserModel -->> UsersService: return newUser
    deactivate UserModel
    UsersService -->> AuthController: return newUser
    deactivate UsersService
end

group Transform data
    AuthController -> ModelDto: new(UserDto)
    activate ModelDto
    ModelDto -> AuthController: return userDto
    deactivate ModelDto

    AuthController --> Client: HTTP 200 Success
    deactivate AuthController
end

deactivate Client

@enduml