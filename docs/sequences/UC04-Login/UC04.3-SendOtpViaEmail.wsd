@startuml Send OTP Via Email

actor Client

participant AuthController
participant UserModel
participant RequestValidation
participant AuthService
participant UsersService
participant MailerService
participant StringUtil
participant UserOtpModel

database MongoDB

' Step 1
    activate Client
    Client -> AuthController: POST /api/auth/send-otp-via-email
    activate AuthController


' Step 2
group Validation Flow
    AuthController -> RequestValidation: validateSchema(SendOtpViaEmailDto)
      activate RequestValidation
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x AuthController: throw HttpException(400)
        AuthController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> AuthController: return valid data
    deactivate RequestValidation
end



' step 3
group Business Logic Flow
    AuthController -> UsersService: getUserByIdService(userId)
    activate UsersService

    UsersService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Internal Server Error

    else user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UsersService: return null
        UsersService -->> AuthController: return null
        AuthController --x AuthController: throw(HttpException(404))
        AuthController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UsersService: return user
    deactivate UserModel
    UsersService -->> AuthController: return user
    deactivate UsersService
    AuthController -> AuthService: checkTimeLeftToResendOTPService(userId)
    activate AuthService
    AuthService -> UserOtpModel: findOne(filters)
    activate UserOtpModel
    UserOtpModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x UserOtpModel: throw Error
        UserOtpModel --x AuthService: throw Error
        AuthService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Internal Server Error
    else user not found
        MongoDB -->> UserOtpModel: return null
        UserOtpModel -->> AuthService: return null
        AuthService -->> AuthController: return null
        AuthController --x AuthController: throw(HttpException(404))
        AuthController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserOtpModel: return userOtp
    deactivate MongoDB
    UserOtpModel -->> AuthService: return userOtp
    deactivate UserOtpModel
    AuthService -->> AuthController: return userOtp
    deactivate AuthService
    AuthController -> AuthService: removeUserOtpsInUserService(userId)
    activate AuthService
    AuthService -> UserOtpModel: deleteMany(filters)
    activate UserOtpModel
    UserOtpModel -> MongoDB: query delete
    activate MongoDB

    alt delete fail
        MongoDB --x UserOtpModel: throw Error
        UserOtpModel --x AuthService: throw Error
        AuthService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Internal Server Error

    else user not found
        MongoDB -->> UserOtpModel: return null
        UserOtpModel -->> AuthService: return null
        AuthService -->> AuthController: return null
        AuthController --x AuthController: throw(HttpException(404))
        AuthController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserOtpModel: return void
    deactivate MongoDB
    UserOtpModel -->> AuthService: return void
    deactivate UserOtpModel
    AuthService -->> AuthController: return void
    deactivate AuthService
    AuthController -> AuthService: createUserOtpService(userId)
    activate AuthService
    AuthService -> StringUtil: generateNumericOTP()
    activate StringUtil
    StringUtil -->> AuthService: return otpCode
    deactivate StringUtil
    AuthService -> UserOtpModel: create(userId, otpCode)
    activate UserOtpModel
    UserOtpModel -> MongoDB: query create
    activate MongoDB

    alt create fail
        MongoDB --x UserOtpModel: throw Error
        UserOtpModel --x AuthService: throw Error
        AuthService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Internal Server Error

    else user not found
        MongoDB -->> UserOtpModel: return null
        UserOtpModel -->> AuthService: return null
        AuthService -->> AuthController: return null
        AuthController --x AuthController: throw(HttpException(404))
        AuthController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserOtpModel: return userOtp
    deactivate MongoDB
    UserOtpModel -->> AuthService: return userOtp
    deactivate UserOtpModel
    AuthService -->> AuthController: return userOtp
    deactivate AuthService
    AuthController -> MailerService: sendOtpCodeService(email, otpCode)
    activate MailerService
    MailerService -> MailerService: getEmailTemplateToString()
    MailerService -> MailerService: sendMail()
       
    alt send mail fail
        MailerService --x MailerService: throw error
        MailerService --x AuthController: throw error
        AuthController -->> Client: HTTP 500 Internal Server Error
    end

    MailerService -->> AuthController: return result
    deactivate MailerService
       
end    


AuthController --> Client: HTTP 200 Success
deactivate AuthController


@enduml