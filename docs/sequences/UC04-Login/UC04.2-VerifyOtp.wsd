@startuml Verify OTP

actor Client


participant AuthController
participant ModelDto
participant RequestValidation
participant AuthService
participant UsersService
participant Jsonwebtoken
participant UserOtpModel
participant MailerService
participant CookieUtil
participant UserModel

database MongoDB

' Step 1
    activate Client
    Client -> AuthController: POST /api/auth/verify-otp
    activate AuthController



' Step 2
group Validation Flow
    AuthController -> RequestValidation: validateSchema(VerifyOtpDto)
    activate RequestValidation
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x AuthController: throw HttpException(400)
        AuthController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> AuthController: return valid data
    deactivate RequestValidation
    
end



' step 3
group Business Logic Flow
    AuthController -> UsersService: getUserByIdService(userId)
    activate UsersService

    UsersService -> UserModel: findOne(filters)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Internal Server Error

    else user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UsersService: return null
        UsersService -->> AuthController: return null
        AuthController --x AuthController: throw(HttpException(404))
        AuthController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UsersService: return user
    deactivate UserModel
    UsersService -->> AuthController: return user
    deactivate UsersService
    AuthController -> AuthService: getValidUserOtpInUserService(userId, otp)
    activate AuthService
    AuthService -> UserOtpModel: findOne(filters)
    activate UserOtpModel
    UserOtpModel -> MongoDB: query select
    activate MongoDB

    alt select fail 
        MongoDB --x UserOtpModel: throw Error
        UserOtpModel --x AuthService: throw Error
        AuthService --x AuthController: throw Error
        AuthController -->> Client: HTTP 500 Internal Server Error

    else user not found
        MongoDB -->> UserOtpModel: return null
        UserOtpModel -->> AuthService: return null
        AuthService -->> AuthController: return null
        AuthController --x AuthController: throw(HttpException(404))
        AuthController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserOtpModel: return userOtp
    deactivate MongoDB
    UserOtpModel -->> AuthService: return userOtp
    deactivate UserOtpModel
    AuthService -->> AuthController: return userOtp
    deactivate AuthService
    AuthController -> UsersService: updateUserVerifiedByIdService(userId)
    activate UsersService
    UsersService -> UserModel: findByIdAndUpdate(id, filters)
    activate UserModel
    UserModel -> MongoDB: query update
    activate MongoDB

    alt Update fail
        MongoDB --x UserModel: throw error
        UserModel --x UsersService: throw error
        UsersService --x AuthController: throw error
        AuthController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UsersService: return user
    deactivate UserModel
    UsersService -->> AuthController: return user
    deactivate UsersService
    AuthController -> MailerService: sendWelcomeEmailService(email, name)
    activate MailerService
    MailerService -> MailerService: getEmailTemplateToString()
    MailerService -> MailerService: sendMail()

    alt send mail fail
        MailerService --x MailerService: throw error
        MailerService --x AuthController: throw error
        AuthController -->> Client: HTTP 500 Internal Server Error
    end
    
    MailerService -->> AuthController: return void
    deactivate MailerService
    AuthController -> AuthService: removeUserOtpsInUserService(userId)
    activate AuthService
    AuthService -> UserOtpModel: deleteMany(filters)
    activate UserOtpModel
    UserOtpModel -> MongoDB: query delete
    activate MongoDB

    alt delete fail
        MongoDB --x UserOtpModel: throw error
        UserOtpModel --x AuthService: throw error
        AuthService --x AuthController: throw error
        AuthController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> UserOtpModel: return userOtps
    deactivate MongoDB
    UserOtpModel -->> AuthService: return userOtps
    deactivate UserOtpModel
    AuthService -->> AuthController: return userOtps
    deactivate AuthService
    AuthController -> AuthService: generateTokensService()
    activate AuthService
    AuthService -> Jsonwebtoken: sign(payload, secret, options)
    activate Jsonwebtoken
    Jsonwebtoken -->> AuthService: return accessToken
    deactivate Jsonwebtoken
    AuthService -> Jsonwebtoken: sign(payload, secret, options)
    activate Jsonwebtoken
    Jsonwebtoken -->> AuthService: return refreshToken
    deactivate Jsonwebtoken
    AuthService -> UserModel: updateOne()
    activate UserModel
    UserModel -> MongoDB: query update
    activate MongoDB

    alt update fail
        MongoDB --x UserModel: throw error
        UserModel --x AuthService: throw error
        AuthService --x AuthController: throw error
        AuthController -->> Client: HTTP 500 Internal Server Error
    end

    MongoDB -->> UserModel: return accessToken, refreshToken
    deactivate MongoDB
    UserModel -->> AuthService: return accessToken, refreshToken
    deactivate UserModel
    AuthService -->> AuthController: return accessToken, refreshToken
    deactivate AuthService
    AuthController -> CookieUtil: setSession(accessToken, refreshToken)
    activate CookieUtil
    CookieUtil -->> AuthController: return cookie
    deactivate CookieUtil

       
end    

group Transform data response
    AuthController -> ModelDto: new(UserDto)
    activate ModelDto
    ModelDto -->> AuthController: return UserDto 
    deactivate ModelDto
AuthController --> Client: HTTP 200 Success
deactivate AuthController
end


@enduml