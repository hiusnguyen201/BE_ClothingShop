@startuml Login Customer

actor Client

participant AuthController
participant ModelDto
participant RequestValidation
participant AuthService
participant UserModel

database MongoDB

' Step 1
    activate Client
    Client -> AuthController: POST /api/auth/login
    activate AuthController

break
break


' Step 2
group Validation Flow
    AuthController -> RequestValidation: validateSchema(RegisterDto)
    activate RequestValidation
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x AuthController: throw HttpException(400)
        AuthController -->> Client: HTTP 400 Bad Request
    end
    RequestValidation -->> AuthController: return valid data
    deactivate RequestValidation
    
end

break
break


' step 3
group Business Logic Flow
    AuthController -> AuthService: authenticateCustomerService(email, password)
    activate AuthService
    AuthService -> UserModel: findOne()
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt query fail 
        MongoDB --x UserModel: throw error
        UserModel --x AuthService: throw error
        AuthService --x AuthController: throw error
        AuthController -->> Client: HTTP 500 Internal Server Error
    else email not found
        MongoDB -->> UserModel: return null
        UserModel -->> AuthService: return null
        AuthService -->> AuthController: return null
        AuthController --x AuthController: throw(HttpException(400))
        AuthController -->> Client: HTTP 400 Bad Request
    else password not match
        MongoDB -->> UserModel: return customer
        UserModel -->> AuthService: return customer
        AuthService -->> AuthController: return customer
        AuthController --x AuthController: throw(HttpException(400))
        AuthController -->> Client: HTTP 400 Bad Request
    end

    MongoDB -->> UserModel: return customer
    deactivate MongoDB
    UserModel -->> AuthService: return customer
    deactivate UserModel
    AuthService -->> AuthController: return customer
    deactivate AuthService
    
end   
break 
break

group Transform data response
    AuthController -> ModelDto: new(CustomerDto)
    activate ModelDto
    ModelDto -->> AuthController: return CustomerDto
    deactivate ModelDto
AuthController --> Client: HTTP 200 Success
deactivate AuthController
end


@enduml