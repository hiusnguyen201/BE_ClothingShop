
@startuml View User Details

actor Client
participant UsersController
participant ModelDto
participant RequestValidation
participant UsersService
participant UserModel
database MongoDB

activate Client
Client -> UsersController: PUT /api/users/:userId/reset-password
activate UsersController

group Validation Flow
    UsersController -> RequestValidation: validateSchema(GetUserByIdDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x UsersController: throw HttpException(400)
        UsersController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> UsersController: return valid data
    deactivate RequestValidation
end

group Business Logic Flow
    UsersController -> UsersService: getUserByIdService(userId)
    activate UsersService

    UsersService -> UserModel: findById(userId)
    activate UserModel
    UserModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x UsersController: throw Error
        UsersController -->> Client: HTTP 500 Server Error
    else user not found
        MongoDB -->> UserModel: return null
        UserModel -->> UsersService: return null
        UsersService -->> UsersController: return null
        UsersController --x UsersController: throw HttpException(404)
        UsersController -->> Client: HTTP 404 Not Found
    end

    MongoDB -->> UserModel: return user
    deactivate MongoDB
    UserModel -->> UsersService: return user
    deactivate UserModel
    UsersService -->> UsersController: return user
    deactivate UsersService

    UsersController -> StringUtil: randomStr()
    activate StringUtil
    StringUtil -->> UsersController: newPassword
    deactivate StringUtil
    UsersController -> UsersService: updateUserPasswordService()
    activate UsersService
    UsersService -> UsersService: genSaltSync()
    UsersService -> UsersService: hashSync()
    UsersService -> UserModel: findByIdAndUpdate()
    activate UserModel
    UserModel -> MongoDB: query update
    activate MongoDB

    alt update fail 
    MongoDB --x UserModel: throw Error
    UserModel --x UsersService: throw Error
    UsersService --x UsersController: throw Error
    UsersController -->> Client: HTTP 500 Server Error
    end 

    MongoDB -->> UserModel: return password
    deactivate MongoDB
    UserModel -->> UsersService: return password
    deactivate UsersService
    UsersService -->> UsersController: return password
    deactivate UsersService

    UsersController -> MailerService: sendPasswordService()
    activate MailerService
    MailerService -> MailerService: getEmailTemplateToString()
    MailerService -> MailerService: sendMail()

    alt send mail fail
        MailerService --x MailerService: throw error
        MailerService --x AuthController: throw error
        AuthController -->> Client: HTTP 500 Internal Server Error
    end
    
    MailerService -->> AuthController: return void
    deactivate MailerService

    
end

    UsersController --> Client: HTTP 200 Success
    deactivate UsersController

deactivate Client

@enduml