@startuml Search User

actor Client
participant UsersController
participant ModelDto
participant RequestValidation
participant UsersService
participant UserModel
database MongoDB

activate Client
Client -> UsersController: GET /api/users/search
activate UsersController

group Validation Flow
    UsersController -> RequestValidation: validateSchema(SearchUserDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x UsersController: throw HttpException(400)
        UsersController -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> UsersController: return valid data
    deactivate RequestValidation
end

group Business Logic Flow
    UsersController -> UsersService: searchUsersService(searchTerm)
    activate UsersService
    
    UsersService -> UserModel: find({ $text: { $search: searchTerm } })
    activate UserModel
    UserModel -> MongoDB: query text search
    activate MongoDB

    alt search fail
        MongoDB --x UserModel: throw Error
        UserModel --x UsersService: throw Error
        UsersService --x UsersController: throw Error
        UsersController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> UserModel: return users
    deactivate MongoDB
    UserModel -->> UsersService: return users
    deactivate UserModel
    UsersService -->> UsersController: return users
    deactivate UsersService
end

group Transform data
    UsersController -> ModelDto: newList(UserDto)
    activate ModelDto
    ModelDto -> UsersController: return usersDto
    deactivate ModelDto

    UsersController --> Client: HTTP 200 Success
    deactivate UsersController
end

deactivate Client

@enduml