@startuml View List Products

actor Client
participant ProductRouter
participant ProductsController
participant ModelDto
participant RequestValidation
participant ProductsService
participant ProductModel
database MongoDB

activate Client
Client -> ProductRouter: GET /api/products/get-products
activate ProductRouter

group Validation Flow
    ProductRouter -> RequestValidation: validateSchema(GetListProductDto)
    activate RequestValidation
    
    alt validation error
        RequestValidation --x RequestValidation: throw HttpException(400)
        RequestValidation --x ProductRouter: throw HttpException(400)
        ProductRouter -->> Client: HTTP 400 Bad Request
    end

    RequestValidation -> ProductRouter: return valid data
    deactivate RequestValidation
end

group Business Logic Flow
    ProductRouter -> ProductsController: getAllProductsController(filters)
    activate ProductsController
    
    ProductsController -> ProductsService: countAllProductsService(filterOptions)
    activate ProductsService
    ProductsService -> ProductModel: countDocuments(filters)
    activate ProductModel
    ProductModel -> MongoDB: query count
    activate MongoDB

    alt count fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> ProductModel: return count
    deactivate MongoDB
    ProductModel -->> ProductsService: return count
    deactivate ProductModel
    ProductsService -->> ProductsController: return count
    deactivate ProductsService

    ProductsController -> ProductsService: getAllProductsService(filters, page, limit, sortBy, sortOrder)
    activate ProductsService
    ProductsService -> ProductModel: find(filters)
    activate ProductModel
    ProductModel -> MongoDB: query select
    activate MongoDB

    alt select fail
        MongoDB --x ProductModel: throw Error
        ProductModel --x ProductsService: throw Error
        ProductsService --x ProductsController: throw Error
        ProductsController -->> Client: HTTP 500 Server Error
    end

    MongoDB -->> ProductModel: return products
    deactivate MongoDB
    ProductModel -->> ProductsService: return products
    deactivate ProductModel
    ProductsService -->> ProductsController: return products
    deactivate ProductsService
end

group Transform data
    ProductsController -> ModelDto: newList(ProductDto)
    activate ModelDto
    ModelDto -> ProductsController: return productsDto
    deactivate ModelDto

    ProductsController --> Client: HTTP 200 Success
    deactivate ProductsController
    deactivate ProductRouter
end

deactivate Client

@enduml